十、C++的引用（Reference）
1.
2.
3.
4 引用型函数返回值
1）可以将函数返回类型声明为引用，避免函数返回值带来的内存开销，如果一个函数返回类型被声明为引用，那么该函数的返回值就是一个左值。
2）为了避免在函数外部修改 引用的目标变量，可以为引用附加常属性。
3）不要从函数返回局部变量的引用，因为所引用的内存会在函数返回以后被释放。
4）可以在函数中返回成员变量，静态变量，全局变量。

5.引用和指针
1）引用的本质就是指针
double d = 1.23；
double& rd = d;--》double* const pd = &d；
*pd <==> rd
---------------------
2）指针可以不做初始化，其目标在初始化以后可以随意修改，而引用必须初始化，且一旦初始化所引用的目标不能再改变。
int a,b;
int* p;
p = &a;//p指向a
p = &b;//p指向b

int& r；//error
int& r = a;//r引用a
r = b；//将b的值赋值给a

3）可以定义指针的指针(二级指针)，但是不能定义引用的引用。
int a；
int* p = &a；
int** pp = &p；//ok

int& r = a；
int&& rr = r；//error,C++2011中叫右值引用

4）可以定义指针的引用，但是不能定义引用的指针
int a；
int* p = &a；
int*& rp = p；//ok

int& r = a;
int&* pr = &r;//error

5）可以定义指针数组，但不能定义引用数组
int a，b，c；
int* parr[3]={&a,&b,&c};//ok
int& rarr[3]={a,b,c};//error

6)可以定义数组的引用
int arr[3] = {1,2,3};
int (&rarr)[3] = arr;//ok
//int (*parr)[3] = &arr;//ok

7)和函数指针一样，可以定义函数的引用，其语法特征与指针完全相同。
void func(int a,int b){}
int main(void){
    void (&rfunc)(int,int) = func;//ok
    rfunc(100,200);//ok
}

*8)指针和引用符号停靠
int *p;
int * p;
int* p;//good

int *p,*q;//good
int* p,*q;
---------------
int a = 10;
int& b = a;//good
int & b = a;
int &b = a;

int c = 20;
int &b = a,&d = c;//good
int& b = a,&d = c;
---------------
十一  类型转换
1 隐式类型转换
   char <--> int
   int <--> double
   int* --> void*
   int a=100;
   void *pv = &a;//ok
   int *pi = pv;//error

2 显示类型转换
2.1 强制类型转换
  int -> char
  char c = 'A';
  int i = (int)c;//C中形式
  int i = int(c);//C++风格形式
2.2 C++增加了四种操作符的形式
1）静态类型转换
     目标类型变量=static_cast<目标类型>(源类型变量)
     主要用于将void*转换为其它类型的指针。
     int a;
     void* pv = &a;//隐式
     int* pi = static_cast<int*>(pv);//静态转换

     double* <--> int*//不能隐式，不能静态
2）动态类型转换（后面讲）
  目标类型变量=dynamic_cast<目标类型>(源类型变量)
3）常类型转换
  目标类型变量=const_cast<目标类型>(源类型变量)
  主要用于去除一个指针或引用的常属性。
  const int a = 10；
  const int* p = &a；
  *p = 20;//error
  int* p2 = const_cast<int*>(p)
  *p2 = 20;//ok

  const int& r = a;
  r = 30;//error
  int&  r2 = const_cast<int&>(r);
  r2 = 30;//ok

4）重解释类型转换
  目标类型变量 =
	reinterpret_cast<目标类型>(源类型变量)
  a.任意类型的指针或引用之间进行转换。
  b.在指针和整型之间的转换。

小结：C++之父给C程序员的建议
1.慎用宏，代之const\enum\inline
#define PAI  3.14 
  -->const double PAI = 3.14;
#define  STATE_SLEEP  0
#define  STATE_RUN    1
#define  STATE_STOP   2
  -->enum STATE{SLEEP,RUN,STOP};
#define max(a,b) ((a)>(b)?(a):(b))
  -->inline int max(int a,int b){
	return a>b?a:b;
       }

2 变量随用随声明同时初始化

3 尽量用new/delete取代malloc/free

4 少用void*、指针计算、联合体和强制转换

5 尽量用string表示字符串，少用C风格的char*

================================
十二 类和对象
1，对象
万物皆对象，任何一种事物都可以看作是对象。

2，面向对象
2.1 如何描述对象
      通过对象的属性(名词、形容词、数量词)和行为(动词)表达对象。
冰箱属性：品牌、容量、颜色、功耗
冰箱行为：装东西、冷冻、冷藏..

2.2 面向对象的程序设计
    对自然界的观察引入到编程实践中的一种理念和方法
    这种方法得益于“数据抽象”，在描述对象时把细节的东西剥离出去，只考虑一般性，有规律性的，统一的东西

3 类
     类是将多个对象共性提取出来 定义的一种新的数据类型，是对 对象的属性和行为的抽象描述，对象是类的实例化。
       属性   行为
狗    犬种   进食
       犬龄   睡眠
       体重   玩耍
       毛色  

十三 类的定义与实例化
1 类的一般形式
class/struct 类名:继承方式 基类{
访问控制限定符:
     类名(形参表):初始化表{//构造函数
          //函数体
     };        
     ~类名(void){//析构函数
          //函数体
     }
     返回类型 函数名(形参表){//成员函数
           //函数体
     }
     数据类型  变量名;//成员变量
};

学生：
       属性      行为
       名字      吃饭
       年龄      睡眠
       学号      学习

2 访问控制限定符
public：公有成员，谁都可以访问该成员
private：私有成员，只有自己可以访问该成员
protected：保护成员。//后面讲
在C++类中class和struct没有本质的区别，唯一不同在于class的缺省访控属性为私有，而struct的访控属性为公有



































