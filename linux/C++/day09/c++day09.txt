二十一  继承（Inheritance）
......
8.4 钻石继承
     A
   /   \  
 B     C 
   \   /  
    D
1）一个子类的多个基类源自共同的基类祖先，这样的继承结构被称为钻石继承。
2）派生多个中间子类(B/C)的公共基类(A)子对象,在继承自多个中间子类的汇聚子类(D)对象中,存在多个实例。在汇聚子类中，或通过汇聚子类对象，访问公共基类的成员，会因继承路径的不同导致不一致。
3）通过虚继承让公共基类子对象在汇聚子类对象中的实例唯一，并为所有的子类共享。

8.5 虚继承语法
1）在继承表中使用virtual关键字。
2）虚基类(A)的所有子类（无论是直接的还是间接的）都必须在其构造函数中显示指明该虚基类子对象的构造方式，否则编译器将以缺省方式构造该子对象。
3）位于继承链的最末端子类的构造函数负责构造虚基类子对象。

练习：实现B、C、D类拷贝构造和拷贝赋值

============================
二十二 多态(Polymorphic)
            图形(位置/绘制)
          /                      \
  矩形(长和宽/绘制)    圆形(半径/绘制)
1 多态概念
     如果将基类中的某个成员函数声明为虚函数，那么其子类中与该函数具有相同原型的成员函数就也是虚函数，并且对基类中的版本形成覆盖。
     这时通过指向子类对象的基类指针，或者引用子类对象的基类引用，调用虚函数，实际被执行的将是子类中的覆盖版本，而不是基类中的原始版本，这种语法现象称为多态。

2 虚函数覆盖的条件
1）只有类的成员函数才能被声明虚函数，类的静态成员函数和构造函数不能被声明虚函数。
2）只有在基类中的以virtual关键字修饰的成员函数才能作为虚函数被子类覆盖，而与子类中virtual关键字无关。
3）虚函数在类中的覆盖版本必须和该函数在基类中的原始版本具有相同的函数签名，即函数名、形参表和常属性必须严格一致。
4）如果基类中的虚函数返回除类 类型的指针和引用以外的数据，那么该函数在子类中的覆盖版本必须返回相同类型的数据。
5）如果基类中的虚函数返回类类型的指针(A*)或引用(A&)，那么允许子类中的覆盖版本返回子类的指针(B*)或引用(B&)——类型协变
class A{};
class B:public A{};
*6)虚函数在子类中的覆盖版本和基类中的原始版本的访问控制属性没有必然联系。

3 多态条件
1）多态特性除了要在基类中声明虚函数，并在子类中提供有效的覆盖，还必须是通过指针或者引用来调用虚函数，才能表现出来。

2）调用虚函数的指针也可以是this指针，只要他是一个指向子类对象的基类指针，同样可以表现出多态性。

*3）当基类的构造被子类的构造函数调用时，子类对象尚未构造完成，不能说是子类类型的，它只能表现出基类类型的外观和行为。这时调用虚函数，只能被绑定到基类版本，没有多态特性。

*4）当基类的洗后函数被在子类的析构函数调用时，子类对象已经不再是子类类型，它只能表现出基类的外观和行为。调用虚函数，只能被绑定到基类版本，没有多态特性。

======================
//哪些函数可以声明成virtual？
成员函数  ok
静态成员函数  no
全局函数  no
构造函数  no
析构函数  ok
操作符重载函数   ok
=================
4 纯虚函数、抽象类和纯抽象类
4.1 纯虚函数
virtual 返回类型 函数名(形参表)[const] = 0;

4.2 抽象类
 1）一个类中包含了至少一个纯虚函数，这个类就是抽象类。
 2）抽象类不能实例化对象。
 3）如果子类没有覆盖其抽象基类中的全部纯虚函数，那么该子类就是一个抽象类，类的抽象的属性可以被继承。

4.3 纯抽象类
如果一个抽象类中除了构造和析构函数意外所有的成员函数都是纯虚函数，那么该抽象类就是一个纯抽象类。



 












