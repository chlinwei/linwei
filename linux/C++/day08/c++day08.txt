二十一  继承（Inheritance）
1
2
3 继承的特性（public）
...
3.4 子类隐藏基类的成员
1）子类和基类中定义同名的成员函数，作用域不同，不能构成重载关系，而是一种隐藏关系。如果需要在子类中访问所隐藏的成员函数可以借助作用域限定操作符"::"显示指明。
2）通过using声明可以将基类的成员函数引入子类的作用域形成重载。

4 继承方式和访问控制限定
4.1 访问控制
访问控制	   访问控制      内部       子类       外部       友元	
限定符          属性             访问       访问       访问       访问
public          公有成员      ok          ok         ok         ok
protected    保护成员      ok          ok         no         ok  
private         私有成员      ok         no         no         ok

4.2 继承方式
基类中的	在公有子	在保护子     在私有子
                 类中变成    类中变成     类中变成
公有成员    公有          	保护 	 私有
保护成员    保护          	保护	 私有
私有成员    私有	私有	 私有	

4.3 私有子类和保护子类类型的指针或引用，不能转换为其基类的指针或引用。

5 子类的构造和析构
5.1 子类构造函数
1）如果子类的构造函数没有显示指明其基类子对象的初始化方式，那么编译器会选择调用基类的无参构造函数初始化该子对象。
2）如果希望子类对象的基类部分以有参的方式被初始化，就需要在子类的构造函数的初始化表中(而不是函数体)显示说明其基类子对象的初始化方式。
3）子类对象的构造过程
   ->分配内存
   ->构造基类子对象(按继承表的顺序)
   ->构造成员子对象(按声明顺序)
   ->执行子类的构造函数体代码
   //析构过程和构造正好相反

5.2 子类的析构函数
1）子类的析构函数，会自动调用其基类的析构函数，析构基类子对象。
2）基类的析构函数不能调用子类的析构函数。
     对一个指向子类对象的基类指针使用delete运算符，实际被调用的是基类的析构 函数，该函数没有调用子类的析构函数，所释放的仅仅基类子对象中的动态资源，子类特有的动态资源将形成内存泄漏。

6 子类的拷贝构造和拷贝赋值
6.1 子类的拷贝构造
1）子类没有定义拷贝构造函数，编译器为子类提供缺省的拷贝构造函数，该函数会自动调用基类的拷贝构造函数，初始化基类子对象。
2）子类定义了拷贝构造函数，但是没有显示指明对基类的拷贝构造，子类对象中的基类子对象将以无参方式初始化。
3）子类定义了拷贝构造函数，同时显示指明对基类拷贝构造，基类子对象将以拷贝方式做初始化。

6.2 子类的拷贝赋值
1）子类没有定义拷贝运算符函数，编译器提供缺省拷贝赋值运算符函数，自动调用基类的拷贝赋值运算符函数，复制基类子对象
2）子类定义了拷贝赋值运算符函数，但是没有复制基类部分，基类子对象保持赋值之前的状态。
3）子类定义了拷贝赋值运算符函数，同时也复制了基类部分，基类子对象也会得到赋值。

*7 子类的操作符重载
    在为子类提供操作符重载函数时，可以调用调用基类针对该操作符的重载定义，完成部分工作。

8 多重继承
8.1 一个子类同时继承多个基类，这样继承方式叫做多重继承。

电话    播放器    计算机
   \         |         /
        智能手机

8.2 将继承自多个基类的子类 类型指针，隐式或静态转换为基类类型，编译器会根据各个基类子对象在子类对象中的内存布局，进行适当的偏移计算，保证指针的类型与其所指向的目标类型一致。

8.3 名字冲突问题
1）一个子类的多个基类中存在相同的名字，当通过子类访问这些名字时，编译器会报歧义错误--名字冲突。
2）解决名字冲突的一般做法就是显示地通过作用域限定指明所访问的名字继承自哪个基类。
3）如果产生冲突的名字是成员函数并且满足重载的条件，可以通过using声明，在子类中形成重载关系，通过重载解析解决冲突问题。

8.4 钻石继承
     A
   /   \  
  B    C 
   \   /  
     D
































