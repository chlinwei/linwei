十四 构造函数和初始化表
1
2
3
4
5 构造函数初始化表
1)指明类中成员变量的初始化方式
  类名(形参表):成员变量1(参数1),成员变量2(常量)..{
      构造函数体;
  }
2)必须要使用初始化表的地方
a.如果有类 类型的成员变量，而该类又没有无参构造函数，则必须通过初始化初始化该成员变量。
b.类中包含"const"和引用"&"成员变量，必须在初始化表中显示的初始化。
c.成员变量初始化顺序由声明顺序决定，而与初始化表的顺序无关。

练习：修改时钟类，要求使用初始化表，为时钟类增加计时器的功能。

十五 this指针与常函数
1.this指针
1）类的构造函数和成员函数中都隐藏一个该类类型的指针参数，名为this。
    a.对于普通的成员函数，this指针就是指向调用该函数的对象。
    b.对于构造函数，this指针就是指向这个正在被构造的对象。

2）this指针可以显示的使用，需要显示使用this指针的地方：
   a.区分作用域
   b.从成员函数中返回对象自身(自引用)
   c.从类的内部销毁对象自身(自销毁)
   d.作为函数的实参，从一个对象传递给另一个对象，实现对象间的交互。

2 常函数
1）在一个成员函数参数表后面加const，这个成员函数就称为常函数。
   返回类型  函数名(形参表) const{函数体}
2）常函数中this指针是一个常指针，不能在常函数中修改该成员变量的值。
3）被mutable关键字修饰的成员变量可以在常函数中被修改
4）非常对象可以调用常函数，可以调用非常函数，但是常对象只能调用常函数，不能调用非常函数。
5）函数名和形参表相同的成员函数，其常版本和非常版本可以构成重载关系，常对象调用常版本，非常对象调用非常版本

十六 析构函数(Destructor)
1 析构是类的特殊的成员函数
 class 类名{
    ~类名(void){...}//析构函数
 };
 1）函数名必须“~类名”
 2）没有返回类型，也没有参数
 3）不能被重载，一个类只能有一个析构函数
 4）主要负责清理对象生命周期内动态产生的资源

2.当对象被销毁时，该对象的析构函数自动被执行
1）栈对象离开作用域时，其析构函数被作用域终止右花括号"}"调用；
2）堆对象的析构函数被delete运算符调用。

3 如果一个类没有显示定义析构函数，那么系统会为该类提供一个缺省析构函数：
1）对基类类型的成员变量，什么也不做；
2）对类 类型的成员变量，调用相应类的析构函数，析构成员子对象。

4 对象的创建和销毁的过程
1）对象的创建
   -->为对象分配内存
   -->按声明顺序依次调用成员子对象的构造函数
   -->执行构造函数体的代码
2）对象销毁
   -->执行析构函数的代码
   -->按声明逆序依次调用成员子对象的析构函数
   -->释放对象所占的内存空间

十七  拷贝构造和拷贝赋值
1 浅拷贝和深拷贝
    如果一个类包含指针形式的成员变量，缺省拷贝构造函数只是赋值指针成员变量本身，而没有复制该指针所指向的内容，这种拷贝构造被称为浅拷贝。
    浅拷贝将导致不同对象间的数据共享，同时会在析构函数中引发"double free"异常，为此必须自己定义一个支持深拷贝的拷贝构造函数。

2 类的缺省拷贝赋值函数和缺省拷贝构造类似，是浅拷贝，为了得到深拷贝的赋值效果，就必须自己定义一个支持深拷贝赋值的运算符函数。
1）防止自赋值
2）释放旧资源
3）分配新资源
4）拷贝新数据
5）返回自引用


作业：实现
          class  String｛
          public:
	构造函数；
	析构函数；
	深拷贝构造；
	深拷贝赋值；
                 访问m_str的接口函数：
          private:
 	char* m_str;
         ｝;
         int main(){
	 String s1("hello world");
                  String s2=s1 ;//拷贝构造
                  String s3;
	 s3 = s2 ;//拷贝赋值
         }








