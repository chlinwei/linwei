了从调用函数向被调用函数传递
   数据也需要被调用函数的执行
	过程提供一组存储区
这组存储区的个数和类型任意
在编写被调用函数的时候在函数
    名称后的小括号里编写一组
	变量声明语句，这些变量
	就用来代表这组存储区
这些变量叫做被调用函数的形式参数
小括号里的所有内容叫做函数
    的形式参数列表
每个形式参数都必须有自己的类型名称
不同形式参数声明之间用逗号分开
函数调用语句中必须提供一组数字
   用来填充形式参数的存储区，这些
   数字叫实际参数
只要能当作数字使用的内容都可以作为
    实际参数使用
如果函数的小括号里写void表示函数
    不提供存储区记录调用函数传递
	过来的数字
如果小括号里什么都不写表示函数可以
    提供任意多个任意类型的存储区
	用来记录调用函数传递过来的
	数字
数组可以作为函数的形式参数使用
数组作为形式参数的时候真正的形式
    参数并不是数组而是一个变量，
	这个变量可以当作数组使用
数组形式参数里包含的存储区不是
    被调用函数的执行过程提供的
数组作为形式参数可以让被调用函数
    使用其他函数提供的存储区
使用数组作为形式参数的时候可以
    省略中括号里的数字
需要提供一个整数类型形式参数
    表示数组里的存储区个数
数组形式参数可以实现双向数据传递，
    这种参数叫做输入输出参数

C语言中函数的形式参数个数可以
   不固定
这种参数叫变长参数

如果编译器首先遇到函数调用语句
    就猜测函数的格式，它认为
	函数有一个整数类型存储区用来
	记录返回值并且函数有任意多个
	任意类型的形式参数
这个猜测结果叫做函数的隐式声明
函数隐式声明中形式参数的类型或者
   是int或者是double
如果函数的实际格式和隐式声明格式
    不一致就会导致编译错误
可以把函数声明单独写在文件开头，
   这叫做函数的显式声明
显式声明可以避免隐式声明带来的问题
除了主函数以外的所有函数都应该
   显式声明

return关键字可以随时结束函数的执行

exit标准函数可以随时结束程序的执行
为了使用这个标准函数需要包含
    stdlib.h头文件
这个函数需要一个整数作为实际参数，
    这个整数的作用就和主函数的
	返回值作用一样

C语言里函数可以调用自己
这种函数叫做递归函数

如果一个问题可以拆分成多个小问题，
    至少一个小问题和原来的问题
	在本质上一样，但是稍微简单
	一点。这种问题适合采用递归
	函数解决。

递归函数编写步骤
1.编写语句描述问题的分解方式
    （假设递归函数已经完成）
2.在函数开头编写分支处理无法分解
    的情况。这个分支必须可以让
	函数结束。

使用递归函数解决问题的思路叫递归
使用循环解决同样问题的思路叫递推

能使用某个变量的所有语句叫做变量
    的作用域
声明在函数内部的变量叫局部变量，
    局部变量的作用域是它所在函数
	内部的所有语句
声明在所有函数外边的变量叫
    全局变量，它们的作用域是
	程序中的所有语句
没有初始化的全局变量会自动被初始化
    成0
全局变量和局部变量可以重名，这种
    时候变量名优先代表局部变量
如果全局变量和局部变量都可以解决
    问题就应该优先选择使用局部变量


一个存储区只能在某个时间范围内
    才可以使用，这个时间范围
	叫做存储区的生命周期
全局变量存储区的生命周期是整
    个程序的执行时间范围
局部变量存储区的生命周期是函数
    某一次执行的时间范围
一个函数不可以使用另外函数的变量，
    但是有可能可以使用那个函数
	的存储区
使用数组作为形式参数可以实现跨函数
    使用存储区
声明变量的时候可以使用static
    关键字，这种变量叫做静态变量
静态变量的生命周期是整个程序
    执行的时间范围
静态局部变量什么时候都可以使用
没有初始化的静态变量会自动被
    初始化成0
静态变量的初始化只在程序开始时
    执行一次
可以跨函数使用静态局部变量的
    存储区
静态全局变量的作用域只包含声明
    它的文件里面的所有语句

预习：
    1.指针


作业：
    1.采用数组改写计算费式数列
	    的递归函数，提高它的
		执行速度






