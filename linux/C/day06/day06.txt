break;语句可以随时结束循环的执行
一旦执行了break;语句循环里一切
    语句都不再执行，包括循环变量
	也不再变化
采用break;语句结束循环后循环变量
    一定落在数字范围内
如果编写循环的时候无法计算出循环
    需要执行的次数就可以编写一个
	死循环，然后用break;语句结束

可以在循环里使用continue;语句直接
    调到循环大括号的末尾

不可预知的数字叫随机数
rand标准函数可以用来产生随机数
为了使用这个标准函数需要包含
    stdlib.h头文件

srand标准函数可以用来设置随机数
    种子
这个函数可以把一个整数当作随机数
    种子使用
为了使用这个标准函数也需要包含
    stdlib.h头文件

time标准函数可以获得当前时间
为了使用这个函数需要包含time.h
    头文件

goto语句可以把任何语句指定成下
    一条语句
一般不要使用goto语句

循环里还可以再写循环，这种结构
    叫做多重循环

如果一个问题可以分成几个小问题，
    每个小问题可以采用类似的
	循环解决。这种问题就可以采用
	多重循环处理。

while关键字也可以用来编写循环
while循环格式如下
while (逻辑表达式) {
	反复执行的语句
}
while循环会一直执行大括号里面的
    语句，直到小括号里逻辑表达式
	为假才结束
while循环中如果把1作为逻辑表达式
    就可以成为死循环
while循环里也可以使用break;和
    continue;语句

while循环会交替执行逻辑表达式和
   大括号里面的语句
while循环第一步是逻辑表达式的计算
while循环有可能不执行大括号里面
   的语句

do...while格式也可以用来实现循环
把while循环大括号前面的内容转移
    到大括号后面，在大括号前面
	补充一个关键字do就成为了
	do...while循环
do...while逻辑表达式小括号后面
   必须用;结束
do...while循环也会交替执行大括号
    里面的语句和逻辑表达式
do...while循环第一步是大括号里面的
    语句
do...while循环至少会把大括号里面
    的语句执行一次

scanf函数工作的时候需要使用输入
    缓冲区
用户在键盘上输入的内容首先进入
    输入缓冲区，然后才会被
	转移到存储区里
先进入输入缓冲区的数字必须首先
    被处理

以下两条语句可以把输入缓冲区
   里没有处理的数据丢弃
scanf("%*[^\n]");
scanf("%*c");

printf函数使用了输出缓冲区
输出缓冲区里的内容在以下四种
   情况下才会出现在屏幕上
1.如果输出缓冲区里有'\n'则
    它前面的内容会显示在屏幕上
2.如果程序结束则它放在输出缓冲区
    里的内容会显示在屏幕上
3.当输出缓冲区被填满的时候它里面
    的内容也会显示在屏幕上
4.可以使用fflush(stdout)强制
    把输出缓冲区里的内容显示
	在屏幕上

数组可以代表内存中一组连续的
    同类型存储区
数组也需要先声明然后才能使用
声明数组时需要提供类型名称，
    数组名称和数组中包含的存储区
    个数
数组里包含的存储区个数一旦确定
    就不可以改变
通常一次只使用数组里的一个存储区
数组中每个存储区有一个编号，这个
    编号叫做存储区的下标
第一个存储区的下标是0，向后
    依次递增
有效下标范围从0开始到个数减一
    为止，超过范围的下标不
	可以使用
可以使用数组名称和下标表示
    数组里的某个存储区

可以使用for循环依次处理数组里
   的每个存储区
这个时候应该让循环变量依次代表
   所有有效下标

数组也应该初始化
1.数组初始化的时候应该把所有初始化
    数据写在一对大括号里面，数字
	之间使用逗号分开
2.如果初始化数据个数多于存储区个数
    则后面的初始化数字自动被忽略
3.如果初始化数据个数少于存储区
    个数则后面的存储区被初始化
	成0
4.如果初始化数据个数和存储区个数
    一样可以省略数组声明里的存储区
	个数

预习：
    1.数组
	2.变长数组
	3.多维数组

作业：
    1.编写程序从键盘得到5个
	    整数，把它们倒序打印
		在屏幕上。计算它们的
		求和结果并打印在屏幕上






