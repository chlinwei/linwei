复习：
1.信号的处理
1.1 信号的处理方式
(1)默认处理，绝大多数信号的默认处理方式都是终止进程
(2)忽略处理
(3)自定义处理

     signal() - 设置对信号的处理方式

父子进程对信号处理方式的比较
    (1)对于fork函数创建的子进程来说，完全照搬父进程对信号的处理方式；
    (2)对于vfork函数和execl函数创建的子进程来说，父进程默认，子进程也默认；父进程忽略，子进程也忽略；父进程自定义，子进程默认处理；

1.2 发送信号的主要方式
(1)采用键盘发送(只能发送部分特殊的信号)
(2)采用程序出错发送(只能发送部分特殊的信号)
(3)使用kill命令   
     kill -信号值 进程号
(4)采用系统函数发送信号
     kill()/raise()/alarm()/sigqueue()

1.3 信号集的概念和操作
     信号集本质就是若干个信号组成的集合
     数据类型：sigset_t类型， 128个字节，采用每一个二进制位来代表一个信号
     sigemptyset() - 清空信号集
     sigfillset() - 填满信号集
     sigaddset() - 添加指定信号到信号集
     sigdelset() - 删除指定的信号
     sigismember() - 判断信号是否存在于信号集中

1.4 信号的屏蔽
     sigprocmask() - 设置/检查/修改屏蔽的信号集
     sigpending() - 获取信号屏蔽期间来过的信号     

1.5 sigaction函数
     是signal函数的增强版，设置对信号的处理方式
--------------------------------------------------------------------------
今天内容：
     (1)信号的处理
     (2)进程间通信的方式

1.信号的处理
1.1 sigaction函数
     #include <signal.h>
     int sigaction(int signum, const struct sigaction *act,struct sigaction *oldact);
第一个参数：信号名称/信号值
      可以选择任何一个有效信号，除了SIGKILL和SIGSTOP
第二个参数：设置针对上述信号的处理方式
struct sigaction 
{
   void (*sa_handler)(int);
=> 函数指针，主要用于设置信号的处理方式
=> SIG_DFL，SIG_IGN，自定义函数的地址

   void (*sa_sigaction)(int, siginfo_t *, void *);
=> 函数指针类型，用于设置信号的处理方式，是否选用该成
     员，取决于sa_flags;

   sigset_t   sa_mask;
=> 主要用于设置在执行信号处理函数期间屏蔽的信号集
=> 默认屏蔽与触发信号处理函数相同的信号
   
   int sa_flags;
=> SA_SIGINFO  使用第二个函数指针来设置信号处理方式 
=> SA_NODEFER 解除对触发信号处理函数相同信号的屏蔽
=> SA_RESETHAND 一旦信号处理函数调用后恢复信号的
      默认处理方式(也就是自定义处理一次)

   void     (*sa_restorer)(void);
=> 函数指针类型，保留成员，暂时不使用
};     
第三个参数：用于获取之前的处理方式
函数功能：
     主要用于检查/修改指定信号的处理方式

其中结构体中的第二个成员的第二个形参类型如下：
struct siginfo_t
{
     ...
     pid_t    si_pid;      /* 发送信号的进程号 */
     sigval_t si_value;    /* 发送信号伴随的附加数据 */
     ... 
};

1.2 sigqueue函数
    #include <signal.h>
     int sigqueue(pid_t pid, int sig, const union sigval value);
第一个参数：进程的编号(给哪个进程发信号)
第二个参数：信号值/信号名称(发送什么样的信号)
第三个参数：发送信号时伴随的附加数据
     union sigval 
     {
          int   sival_int;
          void *sival_ptr;
     };
函数功能：
      主要用于发送信号和附加数据到指定的进程中

1.3 计时器
     在linux系统中，系统会为每一个进程维护3种计时器：真实计时器、虚拟计时器、以及实用计时器，其中一般使用真实计时器更多一些；
     #include <sys/time.h>
     int getitimer(int which, struct itimerval *curr_value);
     int setitimer(int which, const struct itimerval *new_value,struct itimerval *old_value);
第一个参数：计时器的类型(哪一种)
     ITIMER_REAL - 通过统计进程消耗的真实时间来传递SIGALRM信号进行工作的(重点)
     ITIMER_VIRTUAL - 通过统计进程消耗的用户态时间来传递SIGVTALRM信号进行工作的(了解)
     ITIMER_PROF - 通过统计进程消耗的用户态时间和内核态时间的总和来传递SIGPROF信号进行工作的(了解)

第二个参数：结构体指针，用于设置计时器的新值
struct itimerval 
{
     struct timeval it_interval; /* 间隔时间 */
     struct timeval it_value;    /*  启动时间 */
};
struct timeval 
{
     long tv_sec;  /* 秒  = 10^6 微秒*/
     long tv_usec;/* 微秒  */
};
    
第三个参数：结构体指针，用于返回计算器之前的旧值
函数功能：
     主要用于获取/设置计时器的参数值

2.进程间的通信方式
2.1 基本概念
    两个/多个进程之间的数据交互叫做进程间的通信
2.2 通信方式
    (1)文件
    (2)信号
    (3)管道
    (4)共享内存
    (5)消息队列(重点)
    (6)信号量集
    (7)网络(重点)
     ... ...
    其中(4)(5)(6)统称为 XSI IPC通信方式
     (X/open System Interface Inter-Process Communication)

3.使用管道实现进程间的通信
3.1 基本概念
     使用管道通信本质上还是以文件作为通信的媒介，只不过管道是一种比较特殊的文件而已
     管道分为两种：有名管道  和 无名管道
     有名管道：可以用于任意两个进程之间的通信
     无名管道 : 主要用于父子进程之间的通信

3.2 使用有名管道实现进程间的通信
     使用mkfifo命令/函数可以创建有名管道文件
如：
     mkfifo  a.pipe
  => 创建有名管道a.pipe文件
     touch  a.txt
  => 创建普通文件a.txt
     echo  hello  > a.txt
  => 将字符串hello写入到文件a.txt，可以写入的
     echo  hello  > a.pipe
  => 将字符串hello写入文件a.pipe，不可以写入的
     再开另外一个终端，写入以下指令：
     cat  a.pipe
  => 读取管道文件中的内容，此时数据hell可以读取成功
       对面的写入数据也会解除阻塞

     #include <sys/types.h>
     #include <sys/stat.h>
     int mkfifo(const char *pathname, mode_t mode);
 => 主要用于创建一个有名管道文件，权限由第二个参数指定

3.3 使用无名管道实现进程间的通信
    #include <unistd.h>
    int pipe(int pipefd[2]);
函数功能：
    主要用于创建无名管道文件，可以提供进程间通信的一种单向数据通道，通过参数可以返回两个文件描述符，其中pipefd[0]表示读端，pipefd[1]表示写端

注意：
     管道文件的特殊性就在于只是用于作为数据通信的桥梁，但是管道文件自身并不会存放任何数据
     使用管道实现进程间的通信是属于比较古老的方式，以后很少使用

4.使用共享内存实现进程间的通信
4.1 基本概念
      所谓共享内存本质就是一块由系统内核指定并维护的内存区域，该区域可以共享在多个进程之间，因此多个进程可以通过该共享内存作为媒介来实现进程间的通信

4.2 通信模型
(1)获取key值，使用ftok函数
(2)创建/获取共享内存，使用shmget函数
(3)挂接共享内存，使用shmat函数
(4)使用共享内存
(5)脱接共享内存，使用shmdt函数
(6)如果不再使用则删除共享内存，使用shmctl函数

4.3 相关函数的解析
(1)ftok函数
     #include <sys/types.h>
     #include <sys/ipc.h>
     key_t  ftok(const  char *pathname, int proj_id);
第一个参数：字符串形式的路径名
      要求必须关联一个存在并且可以访问的文件
第二个参数：项目的编号，要求非0，取低八位二进制
返回值：成功返回key_t类型的key值，失败返回-1
函数功能：
      主要用于根据路径名和项目编号来生成key值
注意：
      使用相同的路径名和相同的项目编号，最终生成的key值也相同

(2)shmget函数
     #include <sys/ipc.h>
     #include <sys/shm.h>
     int shmget(key_t key, size_t size, int shmflg);
第一个参数：key值，ftok函数的返回值
第二个参数：共享内存的大小，
       如果获取已经存在的共享内存，则实参传0即可
第三个参数：共享内存的操作标志
       IPC_CREAT - 创建
       IPC_EXCL - 与IPC_CREAT搭配使用，如果共享内存已
                          经存在，则创建失败
       0 - 获取一个已经存在的共享内存
返回值：成功返回共享内存的ID，失败返回-1
函数功能：
      主要用于创建/获取一块共享内存
注意：
      使用shmget函数创建新的共享内存时，需要使用低位二进制来指定共享内存的权限信息，如按位或 0664

(3)shmat函数
     #include <sys/types.h>
     #include <sys/shm.h>
      void *shmat(int shmid, const void *shmaddr, int shmflg);
第一个参数：共享内存的ID，shmget函数的返回值
第二个参数：共享内存的地址，给NULL由系统指定
第三个参数：共享内存的操作标志，默认给0即可
返回值：成功返回挂接共享内存的地址，失败返回(void*)-1
函数功能：
     主要用于挂接共享内存到当前进程中

(4)shmdt函数
     #include <sys/types.h>
     #include <sys/shm.h>
     int shmdt(const void *shmaddr);
函数功能：
     主要用于脱接当前进程中的共享内存，参数为shmat函数的返回值

(5)shmctl函数
     #include <sys/ipc.h>
     #include <sys/shm.h>
     int shmctl(int shmid, int cmd, struct shmid_ds *buf);
第一个参数：共享内存的ID，shmget函数的返回值
第二个参数：具体的操作命令
     IPC_RMID - 删除共享内存，此时第三个参数给NULL即可
第三个参数：结构体指针
函数功能：
      主要用于对指定的共享内存进行控制

4.4 相关的基本命令
     ipcs  -m  表示查看当前系统中的所有共享内存
     ipcrm  -m  共享内存的ID  表示删除指定的共享内存

5.使用消息队列实现进程间的通信
5.1 基本概念
    本质上就是将数据打包成消息，然后将消息放到消息队列中，让多个进程访问同一个消息队列，从而实现进程间的通信

5.2 基本模型
(1)获取key值，使用ftok函数
(2)创建/获取消息队列，使用msgget函数
(3)发送/接收消息队列中的消息，使用msgsnd/msgrcv函数
(4)如果不再使用消息队列则删除，使用msgctl函数

5.3 相关函数的解析
(1)msgget函数
     #include <sys/types.h>
     #include <sys/ipc.h>
     #include <sys/msg.h>
     int msgget(key_t key, int msgflg);
第一个参数：key值，ftok函数的返回值
第二个参数：操作标志
      IPC_CREAT  -  创建
      IPC_EXCL  -  与IPC_CREAT搭配使用，若存在创建失败
       0  -  获取一个已经存在的消息队列
返回值：成功返回消息队列的ID，失败返回-1
函数功能：
      主要用于创建/获取一个消息队列
注意：
     当创建新的消息队列时，需要在第二个参数中指定权限信息，如按位或 0664等

(2)msgsnd函数
     #include <sys/types.h>
     #include <sys/ipc.h>
     #include <sys/msg.h>
     int msgsnd(int msqid, const void *msgp, size_t msgsz, int msgflg);
第一个参数：消息队列的ID，msgget函数的返回值
第二个参数：消息的首地址，消息的一般格式如下：
struct msgbuf 
{
    long mtype;      /* 消息的类型, must be > 0 */
    char mtext[1];  /* 消息的内容，可以是其他结构*/
};
第三个参数：消息的大小
     用于指定消息内容的大小，不包括消息的类型
第四个参数：消息的发送标志，默认给0即可
     IPC_NOWAIT  -  不会产生阻塞现象
函数功能：
      主要用于将指定的消息发送到指定的消息队列中

作业：
     查询剩余的两个功能函数
明日预报：
     (1)使用消息队列实现进程间的通信
     (2)使用信号量集实现进程的通信
     (3)综合小项目：模拟ATM的功能





































 


















































 





































