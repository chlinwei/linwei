1.自我介绍
   马如忠     ruzhongMa    小马哥    
   marz@tedu.cn 

   赠送一句话：
        程序员是代码喂出来的   
   永久性的作业：
        苦练指法！
   
2. 课程的简介
2.1 课程阶段的简介
     Unix/linux系统下的基本命令
  => 主要学习Unix/linux中常用的命令
  => 依赖于具体的操作系统，但是部分命令与windows相同
  
     标准C语言的学习
  => 主要学习标准C语言的基本语法
  => 不依赖于具体的操作系统，绝大部分程序可以在任意系
       统中使用
     
     数据结构和算法
  => 主要学习常用的数据结构和算法，理解编程的思想
  => 不依赖于具体的编程语言，也不依赖于具体的操作系统

     Unix/linux系统下的高级C编程
  => 主要学习操作系统的基本原理以及常用的API函数
  => 依赖于具体的编程语言，也依赖于具体的操作系统
  => 用时 15天 左右

  目前主流的主机操作系统：
       unix系列/linux系列/windows系列
       windows系列： Xp/vista/win7/win8/win8.1/win10
     
   目前主流的移动终端操作系统：
        android/ios/window10
 
2.2 Unix/linux系统下高级C编程的主要内容
    (1)Unix/linux系统下的开发方式和编程基础
    (2)Unix/linux系统下的内存管理技术
    (3)Unix/linux系统下的文件管理和目录操作
    (4)Unix/linux系统下的进程管理  
    (5)Unix/linux系统下的信号处理
    (6)Unix/linux系统下的进程间通信技术
    (7)Unix/linux系统下的网络编程技术
    (8)Unix/linux系统下的多线程技术
----------------------------------------------------------------------------
今天内容：
    (1)Unix/linux系统的简介
    (2)gcc编译器的使用
    (3)多文件结构的编程
    (4)常用的预处理指令
    (5)环境变量的概念和使用

1.Unix/linux系统的简介
1.1 Unix系统的简介
      在1969年左右，编写操作系统时采用的汇编语言，编写和维护都非常不方便，贝尔实验室  汤普逊 研发了一门语言叫做B语言， 贝尔实验室 丹尼斯-里奇 在B语言的基础上做了修改和扩展，叫做 New B语言，后来改名为C语言
      C语言诞生于1972年，在编程语言排行榜上占据重要
的地位    
      Unix系统诞生于1970年，具有多用户、多任务以及支持多种处理器的特点  

1.2 linux系统的简介
     linux系统是一款  自由免费开放源代码的类Unix操作系统
     ubuntu 系统是一款linux系列的操作系统，每六个月会发布一个版本，分别是：4月 和  10月
     当前教学环境： ubuntu  12.04版本   32位的操作系统
     
2.gcc的使用
2.1 基本概念
    gcc 原名叫做 GNU C Compiler(编译器)，只支持对C语言的编译处理，后来对该编译器做了扩展，支持了更多的编程语言，如C++等，因此改名为 GNU  Compiler Collection

2.2 基本功能(重点)
     编程时采用的是高级语言，如C语言等，高级语言编写的程序代码无法被计算机直接执行，需要将高级语言转换为汇编语言，再将汇编语言转换为机器指令，最后链接生成可执行文件才能被计算机执行，而上述过程主要包含以下四步走：
(1)预处理/预编译
    - 主要用于实现头文件的扩展和宏替换等
(2)编译
    - 主要用于将高级语言翻译成汇编语言，得到汇编文件
(3)汇编
    - 主要用于将汇编语言翻译成机器指令，得到目标文件
(4)链接
    - 主要用于将目标文件和库文件进行链接，得到可执行文件

2.3 常用的编译选项
(1)熟练掌握的选项
     gcc/cc -E  xxx.c
  => 表示对高级源代码文件进行预处理操作，默认输出到控
        制台上，使用-o选项来改变输出位置为 xxx.i
      
     gcc/cc -S xxx.i
  => 表示将预处理文件经过编译翻译成汇编语言文件(xxx.s)

     gcc/cc -c xxx.s
  => 表示将汇编语言文件翻译成机器语言文件(xxx.o)

     gcc/cc xxx.o
  => 表示链接目标文件和库文件生成可执行文件(a.out)
     gcc/cc xxx.c
  => 表示编译链接生成可执行文件(需要执行上述4步走)

练习：
     gcc/cc -E xxx.c -o xxx.i
     gcc/cc -S xxx.i/xxx.c
     gcc/cc -c xxx.s/xxx.i/xxx.c
     gcc/cc xxx.o/xxx.s/xxx.i/xxx.c

(2)熟悉的选项
     -std   表示用于指定具体的C标准
     -v      表示用于查看编译器的版本信息
     -Wall 表示尽可能多地显示所有的警告信息
     -Werror 表示把警告当作错误进行处理

(3)了解的选项
     -g  表示生成调试信息
     -x   表示用于指定源代码的编程语言
     -O  表示进行优化处理

(4)扩展的选项
     man  命令/函数名称/gcc/cc 
     作业： 装个英文词典 -  星际译王 

2.4 常见的文件后缀
     .h  - 头文件             .c  - 源文件
     .i   - 预处理文件       .s  - 汇编文件
     .o  - 目标文件            
     .a  - 静态库文件        .so - 共享库文件

3.多文件结构的编程
3.1 多文件结构的主要组成
     .h - 头文件，主要存放结构体的定义，函数的声明等
     .c - 源文件，主要存放函数的定义等
     .a - 静态库文件，主要对功能函数的打包
     .so - 共享库文件，主要对功能函数的打包

3.2 头文件的详细内容(重点)
(1)头文件卫士
    #ifndef xxxx
    #define xxx
    #endif //xxx
(2)包含其他头文件
    #include <stdio.h>
    ... ...
(3)进行宏定义
    #define PI 3.14
    ... ...
(4)结构体的定义以及对类型起别名
    typedef struct 
    {
	 link lk;
    } stack;
(5)外部变量/函数的声明
    extern int num;
    void show(void);
    ... ...

注意：
    变量/函数的定义不能放在头文件中，因为当多个.c包含该头文件时，在一起编译链接的情况下会引发重定义的错误信息

例子：
     采用多文件的结构进行编程，要求根据用户输入的半径计算出圆形的周长和面积
     周长： 2 * PI * r 
     面积： PI * r * r

作业：
     练习从高级源代码到可执行文件的生成步骤
明日预报：
    (1)常用的预处理指令
    (2)环境变量的概念和使用
    (3)库文件的概念和使用






























 
















      





 







           








  






   













