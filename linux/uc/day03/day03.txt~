复习：
1.常用的预处理指令
   #line 整数n
   #warning 字符串
   #error 字符串
   
   #pragma GCC dependency 文件名
   #pragma GCC poison 标识符
   #pragma pack(整数n)   

2.环境变量的概念和使用
2.1 基本概念
   环境变量 - 用于存放系统/软件环境参数信息的特殊变量
   Path/PATH 就是一种环境变量，存放应用程序/软件的路径信息，启动应用程序/软件 只需要文件名即可

2.2 配置方法
(1)Xp系统
     我的电脑  => 右键，选择属性  => 高级  => 环境变量 => 系统变量Path，点击编辑，在变量值的末尾增加分号，添加新路径  =>  一路点击确定即可

(2)linux系统中配置方法
     终端中： export PATH=$PATH:.
      vi ~/.bashrc文件
      source ~/.bashrc

2.3 常用的环境变量
     CPATH/C_INCLUDE_PATH
     CPLUS_INCLUDE_PATH
     LIBRARY_PATH 
     LD_LIBRARY_PATH
     
2.4 查找头文件的主要方式
(1)#include <>
(2)#include ""
(3)配置环境变量CPATH  
     export CPATH=$CPATH:..
(4)gcc/cc xxx.c -I 头文件所在的路径(重点)

3.库文件的概念和使用
3.1 静态库的概念和特性
(1)基本概念
     静态库本质就是由若干个.o文件打包生成的.a文件
     链接静态库的方式本质就是将被调用的代码指令复制到调用模块中，体现在最终的可执行文件中

(2)基本特性
优点：
     a.不需要跳转，执行效率高
     b.可以脱离静态库文件
缺点：
     a.最终生成的可执行文件会比较大
     b.修改和维护都不方便
----------------------------------------------------------------------------
今天内容：
    (1)库文件的概念和使用
    (2)C语言中的错误处理
    (3)环境表的概念和使用

1.库文件的概念和使用
1.1 静态库的生成和调用步骤
(1)生成步骤
    a.编写源程序xxx.c，如：vi add.c
    b.只编译不链接生成目标文件xxx.o
       如： cc -c add.c
    c.生成静态库文件
        ar -r/*插入*/ lib库名.a 目标文件名
        ar -r libadd.a add.o

(2)调用步骤
    a.编写测试源程序xxx.c，如：vi main.c
    b.只编译不链接生成目标文件xxx.o
       如： cc -c main.c
    c.链接静态库文件生成可执行文件，链接方式有以下三种：
       1)直接链接
            cc 目标文件 静态库文件名
            如：cc main.o libadd.a
       2)采用编译选项进行链接(重点)
            cc 目标文件 -l 库名 -L 库文件所在的路径
            如：cc main.o -l add -L .
       3)通过配置环境变量LIBRARY_PATH进行链接
             export LIBRARY_PATH=$LIBRARY_PATH:.
             cc main.o -l add

1.2 共享库的基本概念和特性
(1)基本概念
     共享库本质就是由若干个.o文件打包生成的.so文件
     共享库和静态库的最大不同就是：链接共享库时并不会把被调用的代码指令复制到调用模块中，而是将被调用的代码指令在共享库中的相对地址嵌入到调用模块中

(2)基本特性
优点：
      a.共享库占用的空间比较小，也就是可执行文件比较小
      b.修改和维护都非常方便
缺点：
      a.需要跳转执行，因此执行效率比较低
      b.不可以脱离共享库文件

注意：
     目前主流的开发都采用共享库文件

1.3 共享库的生成和调用步骤
(1)生成步骤
    a.编写源程序xxx.c，如：vi add.c
    b.只编译不链接生成目标文件xxx.o
      如： cc -c -fpic/*小模式*/ add.c
    c.生成共享库文件
       gcc/cc  -shared/*共享的*/ 目标文件 -o lib库名.so
      如:   cc -shared add.o -o libadd.so 
(2)调用步骤
    a.编写测试源程序xxx.c，如：vi main.c
    b.只编译不链接生成目标文件xxx.o
       如： cc -c main.c
    c.链接共享库文件生成可执行文件，链接方式有以下三种：
       1)直接链接
            cc 目标文件 共享库文件名
            如：cc main.o libadd.so
       2)采用编译选项进行链接(重点)
            cc 目标文件 -l 库名 -L 库文件所在的路径
            如：cc main.o -l add -L .
       3)通过配置环境变量LIBRARY_PATH进行链接
             export LIBRARY_PATH=$LIBRARY_PATH:.
             cc main.o -l add    

注意：
     调用共享库文件时需要配置环境变量LD_LIBRARY_PATH
，具体的配置方法如下：
     export  LD_LIBRARY_PATH=$LD_LIBRARY_PATH:. 

注意：
    当同一个目录中具有相同库名的静态库和共享库时，使用gcc/cc编译链接时会自动优先选择共享库进行链接，如果希望链接静态库则使用-static选项来强制要求

1.4 共享库的动态加载
     #include <dlfcn.h>
     编译链接时需要指定选项  -ldl
(1)dlopen函数     
     void *dlopen(const char *filename, int flag);
第一个参数：字符串形式的文件名
第二个参数：具体的操作标志
      RTLD_LAZY - 延迟加载
      RTLD_NOW - 立即加载
返回值：成功返回共享库的句柄信息/地址，失败返回NULL
函数功能：
      主要用于加载第一个参数指定的共享库到内存中

(2)dlsym函数
     void *dlsym(void *handle,  const  char *symbol);
第一个参数：共享库的句柄，dlopen函数的返回值
第二个参数：字符串形式的符号，一般指函数名
返回值：成功返回函数名所对应的内存地址，失败返回NULL
函数功能：
      主要用于查找指定共享库中指定函数被加载到内存中地址

(3)dlclose函数
     int dlclose(void *handle);
函数功能：
     主要用于关闭/卸载参数指定的共享库，成功返回0，失败
     返回非0

(4)dlerror函数
     char *dlerror(void);
函数功能：
     主要用于获取dlopen/dlsym/dlclose函数执行期间产生的最近一个错误信息通过返回值返回，如果没有产生错误，则返回值为NULL

2.C语言中的错误处理
如：
     int main(void)
     {
           return 0; //表示程序正常结束
          // return -1;  // 表示程序出错结束
     }
2.1 C语言中的错误表现形式(错了吗？)
     一般来说，C语言中函数的错误表现形式如下：
     (1)对于返回值类型为int类型的函数来说，并且函数的计算结果不可能是负数时，使用返回-1表示出错，使用其他数据表示正常结束
     (2)对于返回值类型为int类型的函数来说，如果函数的计算结果可能是负数时，使用指针作为函数的参数将函数的计算结果带出去，而函数的返回值专门用于表示函数是否出错，习惯上使用-1表示出错，0表示正常结束
     (3)对于返回值类型为指针类型的函数来说，使用返回NULL表示函数出错，其他数据表示正常结束
     (4)如果不考虑函数是否出错，则返回值类型使用void即可

例子：
      按照上述要求，编写以下四个功能函数
      (1)要求返回1~10之间的随机数，如果随机数是5，则返回错误
      (2)比较两个int类型参数的大小，返回其中的最大值，如果两个参数相等，则返回错误
      (3)比较传入的字符串是否为"error"，如果是则返回错误，否则返回”ok“
      (4)打印传入的字符串即可

2.2 错误的编号（为什么错了？）
     errno本质就是一个int类型的全局变量，当函数调用出错时，会自动将错误的原因编号设置到errno中，因此可以通过errno的值来获取具体的错误原因
     #include <errno.h>
     该头文件中包含了errno全局变量的外部声明，以及常见的错误编号宏定义

     /etc/shadow - 存放了真实的密码信息，不过有加密
     /etc/passwd - 存放了当前系统的所有用户信息
文件的内容解析如下：
     tarena:  x:     1000   :  1000:
     用户名：密码：用户ID： 用户组ID
     tarena,,,:/home/tarena:  /bin/bash     
     注释信息 :    用户主目录    : shell的类型

作业：
     (1)查询函数strerror 和 perror的使用
     (2)编写两个功能函数，分别打印实心的菱形和空心的菱形，将这两个函数所在的.c文件分别打包成静态库和共享库进行调用，再练习一下共享库的动态加载
           *                        *
         ***                     * *
       *****                  *    *
         ***                     * *
           *                         *

明日预报：
     (1)C语言中的错误处理
     (2)环境表的概念和使用
     (3)内存管理技术













































     

















































