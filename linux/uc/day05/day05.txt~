复习：
1.C语言中的错误处理
     strerror() - 根据指定的错误编号翻译成对应的错误信息
     perror() - 打印错误信息
     printf("%m\n"); - 打印错误信息

2.环境表的概念和使用
2.1 基本概念
      环境表本质就是环境变量的集合，每个进程都拥有一张独立的环境表，用于记录属于当前进程的环境信息
      环境表本质是一个以NULL指针为结尾的字符指针数组，环境表的首地址记录在 全局变量 char** environ;

2.2 基本操作
     getenv() - 获取环境变量的值
     setenv() - 增加/修改环境变量
     unsetenv() - 删除环境变量
     putenv() - 增加/修改环境变量
     clearenv() - 清空整个环境表

2.3 main函数的原型
    int main(int argc,char* argv[],char* envp[])

3.内存管理技术
3.1 程序和进程的概念
     程序 - 存放在磁盘上的可执行文件
     进程 - 运行在内存中的程序
     程序可以同时启动多个进程

3.2 进程的内存区域划分
     内存地址从小到大：代码区、只读常量区、全局区/数据区、BSS段、堆区、栈区

作业：
----------------------------------------------------------------------------
今天内容：
     (1)内存管理技术

1.内存管理技术
1.1 存放常量字符串的不同形式之间的比较
如：
    char* pc = "hello";
    char ps[] = "hello";

      对于记录常量字符串的字符指针来说，指针的指向可以改变，但是指针指向的内容不可以改变；
      对于记录常量字符串的字符数组来说，数组名的指向不可以改变，但是数组名指向的内容可以改变；
      对于记录动态内存区域的指针来说，指针的指向和指针指向的内容都可以改变；

1.2 虚拟内存管理技术
    在Unix/linux系统中都采用虚拟内存管理技术对内存空间进行管理，即：每个进程都有0 ~ 4G-1的虚拟地址空间(虚拟的，并不是真实存在的)，由操作系统负责把虚拟地址和真实的物理内存地址映射起来，因此，不同进程中的地址空间看起来是一样的，但是所对应的物理内存却是不一样的
     其中0 ~ 3G-1之间的地址空间叫做用户空间，3G ~ 4G-1之间的地址空间叫做内核空间，绝大多数用户程序都运行在用户空间，内核空间只有内核才可以访问，当然内核也提供了相关的函数用于访问内核空间
     内存地址的基本单位是字节，但是内存映射的基本单位是内存页，目前主流的操作系统中一个内存页的大小是4Kb，也就是4096个字节
      ... ...
     1Pb = 1024Tb
     1Tb = 1024Gb
     1Gb = 1024Mb
     1Mb = 1024Kb
     1Kb = 1024byte(字节)
     1byte = 8 bit(二进制位)

1.3 段错误的由来
    (1)试图使用没有经过映射的虚拟地址时，可能引发段错误
    (2)试图对没有操作权限的内存空间进行操作时，可能引发段错误

1.4 使用malloc函数申请动态内存
(1)使用malloc函数申请的动态内存时的注意事项
     使用malloc函数申请动态内存时，malloc函数除了申请指定的内存空间之外，还可能申请额外的12个字节用于存储动态内存的管理信息，包括动态内存的大小，是否可用等信息，因此以后使用malloc函数申请的动态内存时，切记不要对动态内存进行越界访问，以避免对管理信息的破坏

(2)使用malloc函数申请动态内存的一般性原则
     一般来说，当使用malloc函数申请比较小块的动态内存时，操作系统会一次性映射33个内存页大小的存储空间，本质就是为了提高效率
    #include <unistd.h>
    #include <sys/types.h>
    getpid() - 主要用于获取当前进程的进程号
    
     cat  /proc/进程号/maps 
      - 表示查看指定进程的内存映射情况
具体的察看结果有六列：地址范围、操作权限、偏移量、设备
      编号、I节点的编号、具体的进程名称/内存区域名称

1.5 使用free函数释放动态内存
     一般来说，使用free函数释放动态内存时，释放多少则减去多少，当把所有动态内存全部释放完毕时，系统还会保留33个内存页，本质上还是为了提高效率

1.6 内存管理的相关函数
(1)getpagesize函数
     #include <unistd.h>
     int getpagesize(void);
函数功能：
     主要用于获取当前系统中一个内存页的大小，目前主流的操作系统都是4096个字节

(2)sbrk函数
     #include <unistd.h>
     void *sbrk(intptr_t increment);
函数的功能：
     主要用于根据参数指定的值来调整动态内存空间的大小
     当参数 > 0时：
          申请动态内存，成功返回申请到的内存空间的首地址
     当参数 = 0时：
          动态内存空间不变，成功返回当前动态内存的末尾地址
     当参数 < 0时：
          释放动态内存，成功返回释放之前的内存空间末尾地址
      函数调用失败时，返回(void*)-1

注意：
     使用sbrk函数申请内存比释放内存简单
     一般来说，使用sbrk函数申请比较小的内存时，操作系统会一次性映射1个内存页的大小，当申请的内存空间超过1个内存页时，系统会再次映射1个内存页的大小，当使用sbrk函数释放1个字节的内存时，系统可能会一次性释放1个内存页，当所有的动态内存被释放时，系统不会保留动态内存，因此相对于malloc函数来说更节省内存空间，但是效率没有malloc函数高

作业：
     查询并尝试使用brk函数
明日预报：
    (1)内存管理技术
    (2)文件管理























    




















 















   





































    
















    












 








