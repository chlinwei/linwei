复习：
1.Unix/linux系统的简介
1.1 Unix系统的简介
     C语言诞生于1972年，在编程语言排行榜上占据重要
的地位
     Unix系统诞生于1970年，具有支持多用户、多任务、以及多种处理器的特点

1.2 linux系统的简介
     linux系统是一款  免费自由开发源代码的类Unix操作系统
    
2.gcc编译器的使用
2.1 基本概念
     原名叫做GNU C Compiler  该名为 GNU Compiler Collection

2.2 基本功能
     根据高级语言编写的源代码，来生成最终的可执行文件
(1)预处理/预编译   -E   
(2)编译  -S
(3)汇编   -c
(4)链接   gcc/cc xxx.o

2.3 常用的编译选项
     -E    -S   -c   -o 
     -std   -v   -Wall   -Werror
     -g   -x   -O
     man gcc/cc

2.4 常用的文件后缀
     .h     .c    .i     .s     .o     .a     .so

3.多文件结构的编程
3.1 多文件结构的主要组成
      .h   .c   .a    .so
3.2 头文件中的详细内容
(1)头文件卫士
     #ifndef ...
     #define ...
     #endif
(2)包含其他头文件
     #include <stdio.h>
(3)进行宏定义
     #define PI 3.14
(4)结构体的定义以及对类型其别名
     typedef struct
     {
          int id;
          char name[20];
     }Student; 
(5)外部变量/函数的声明
     extern int num;
     void show(void);
----------------------------------------------------------------------------
今天内容：
    (1)常用的预处理指令
    (2)环境变量的概念和使用
    (3)库文件的概念和使用

1.常用的预处理指令
1.1 复习标C中学过的预处理指令
     #include   包含...
     #define     定义...
     #undef      取消宏定义
     #ifdef        如果定义...
     #ifndef      如果没有定义...
     #if             如果...
     #elif          否则如果...
     #else         否则...
     #endif        结束如果
     ... ...

1.2 学习常用的新指令
     #line  整数n
 => 主要用于将下一行的行号修改为第n行
 => 可以用于控制调试阶段出错的行号

     #warning  字符串
  => 表示在预处理阶段产生一个警告信息
     #error 字符串
  => 表示在预处理阶段产生一个错误信息
  => 可以用于在调试阶段产生错误/警告信息
思考：
     #if   和 普通的if之间有什么区别呢？？
       #if  - 在编译期间做检查和判断
         if   - 在运行阶段做检查和判断

     #pragma GCC dependency 文件名
 => 表示当前文件依赖于指定的文件名，如果指定的文件最后
       一次修改时间晚于当前文件，则产生警告信息
 => 可以用于在调试阶段去监控具体的文件
老杨：vi show.c
       void show(void)
       {
             printf("我是帅哥我怕谁\n");
       }
小马哥：vi main.c
       #pragma GCC dependency "show.c"
       int main(void)
       {
             show();
             return 0;
       }

       #pragma GCC poison 标识符
   => 主要用于将指定的标识符设置为毒药，一旦使用该标识
        符则产生错误信息
         
      #pragma pack(整数n)
   => 表示设置结构体按照n的整数倍进行对齐和补齐
   => 主要用于通过上述方式来节省内存空间
        
1.3 常用的预定义宏
    __FILE__  -  用于获取预定义宏所在的文件名   %s
    __LINE__  -  用于获取预定义宏所在的行号      %d
    __DATE__ -  用于获取预定义宏所在文件的最后一次
                       编译日期  %s
    __TIME__ -  用于获取预定义宏所在文件的最后一次
                       编译时间  %s
    ... ...

2.环境变量的概念和使用
2.1 基本概念
      环境变量 - 一般是指在操作系统中用来指定操作系统运行的相关参数的特殊变量，也就是说环境变量就是用于存放系统/软件环境 相关参数信息的 特殊变量
      Path/PATH本质就是一种环境变量，路径存放在该环境变量中的应用程序/软件 可以通过文件名直接运行，从而省略路径信息

2.2 配置方法
(1)Windows Xp系统中的配置方法
      我的电脑 => 右键，选择属性  => 高级  =>  环境变量 => 系统变量中，找到Path,点击编辑  =>  在Path变量值的最后增加分号，再添加新路径  => 一路点击确定即可
      其中分号就是一个路径分隔符，用于划分不同的路径
      (切记 不要删除Path变量中之前的变量值)
(2)linux系统中的配置方法
      打开终端输入：  
           export PATH=$PATH:.
                $PATH - 表示获取环境变量PATH原来的数值
                     ：    - 表示路径分隔符，用于划分不同的路径
                       .  - 表示当前目录
      执行上述指令之后，表示把当前目录所在的路径追加到环境变量PATH的变量值末尾
      上述配置方法只对当前终端有效，新开的终端无法使用，为了配置永久性生效，vi ~/.bashrc文件中，编写以下代码：
      export PATH=$PATH:.
      保存退出之后，使用source ~/.bashrc文件，让配置文件中的指令立即生效

处理意外情况的方法：
     打开主目录，在主目录中使用快捷键 ctrl + h来显示所有的隐藏目录和文件，找到.bashrc文件，点击鼠标右键，选择使用文件编辑器的方式打开，修改文件内容后，保存关闭即可

2.3 编程相关的常用环境变量
     CPATH/C_INCLUDE_PATH 
  - 主要用于存放C语言头文件所在的路径
     CPLUS_INCLUDE_PATH 
  - 主要用于存放C++语言头文件所在的路径
     LIBRARY_PATH 
  - 主要用于存放库文件路径，解决编译链接时的问题
     LD_LIBRARY_PATH
  - 主要用于存放共享库所在的路径，解决运行时的问题

练习：
     采用多文件的结构进行编程，编写以下3个文件：
        add.h - 声明一个计算两个int类型参数和并返回的函数
        add.c  - 实现头文件中声明的函数
        main.c - 调用自定义的函数即可

2.4 查找头文件的主要方式
(1)#include <>
     - 表示在系统默认的路径中查找该头文件中
     - /usr/include/ ...
     - 可以使用命令whereis 来查找具体的头文件
(2)#include ""
     - 表示优先在当前目录中查找该头文件，查找不成功时，
       也会去系统默认的路径中进行查找
(3)配置环境变量CPATH/C_INCLUDE_PATH
       export CPATH=$CPATH:..
(4)采用编译选项进行指定(重点)
       gcc/cc xxx.c -I 头文件所在的路径
       gcc/cc xxx.c -I ..

注意：
      方法(1)(2)的缺点在于：一旦头文件的位置发生改变，则需要修改源程序来解决问题
      方法(3)的缺点在于：当有多个项目需要配置环境变量时，可能会引起冲突
      方法(4)的优势在于既不需要修改源程序，也不会引起多个项目的冲突问题，因此优先采用此方法

3.库文件的概念和使用
      在大型项目中，如果每个功能函数都存放在一个独立的.o文件中，那么项目管理变成灾难问题，因此采用库文件来解决该文件，具体的解决方案如下：一般按照功能模块将多个.o文件打包成一个/多个库文件，编写者只需要提供库文件和头文件即可
     库文件主要分为两种： 静态库文件(.a) 和共享库文件(.so)

3.1 静态库的概念和特性
(1)基本概念
     静态库本质就是由若干个.o文件打包生成的.a文件
     链接静态库的方式就是将库中被调用的代码指令复制到调用模块中，体现在最终的可执行文件中

(2)基本特性
优点：
      a.不需要跳转，因此效率会比较高
      b.可以脱离静态库文件
缺点：
      a.最终生成的可执行文件会比较大
      b.修改和维护都非常不方便

注意：
      使用ldd a.out的方式查看所以来的库文件
      使用gcc/cc -static xxx.c的方式强制要求按照静态库的方式进行链接处理，最终生成的可执行文件比较大

作业：
     复习uc讲过的内容
明日预报：
     (1)库文件的概念和使用
     (2)C语言中的错误处理
     (3)环境表的概念和使用






















      





   

























 
     




               




     












    














 





