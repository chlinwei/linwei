复习：
1.网络的基本常识
1.1 七层网络模型和常用的网络协议
     七层网络模型：应用层、表示层、会话层、传输层、网络层、数据链路层、物理层
     TCP  -  传输控制协议，面向连接的协议，提供可靠的全双工的字节流通信
     UDP  -  用户数据报协议，非面向连接，没有tcp可靠但是传输速度比较快
     IP   -  互联网协议，上述协议的底层协议

1.2 IP地址和子网掩码
    IP地址本质就是互联网中的唯一地址标识，是32位二进制组成的整数(ipv4)，还有128位二进制组成的整数(ipv6)
    日常生活中，采用点分十进制表示法描述IP地址
    IP地址分为:  网络地址  +  主机地址

    子网掩码 -  主要用于划分IP地址的网络地址和主机地址
         IP地址 &  子网掩码

1.3 端口号和字节序
    IP地址 -  定位具体的某一台主机
    端口号 - 定位具体主机中的某一个进程
   端口号的数据类型是：unsigned short类型，范围是：0 ~ 65535，其中0 ~ 1024被系统占用

小端系统：将低位数据存放在低位内存地址的系统
大端系统：将地位数据存放在高位内存地址的系统

2.基于socket的一对一通信模型
服务器：
      (1)创建socket，使用socket函数
      (2)准备通信地址，使用结构体类型
      (3)绑定socket和通信地址，使用bind函数
      (4)进行通信，使用read/write函数
      (5)关闭socket，使用close函数
客户端：
      (1)创建socket，使用socket函数
      (2)准备通信地址，使用服务器的地址
      (3)连接socket和通信地址，使用connect函数
      (4)进行通信，使用read/write函数
      (5)关闭socket，使用close函数
-----------------------------------------------------------------------------
今天内容：
     (1)基于tcp协议的网络通信模型
     (2)tcp协议和udp协议的比较
     (3)基于udp协议的网络通信模型

1.基于tcp协议的网络通信模型(重点)
1.1 通信模型
服务器：
     (1)创建socket，使用socket函数
     (2)准备通信地址，使用结构体类型
     (3)绑定socket和通信地址，使用bind函数
     (4)监听，使用listen函数
     (5)响应客户端的连接请求，使用accept函数
     (6)进行通信，使用read/write函数
     (7)关闭socket，使用close函数
客户端：
     (1)创建socket，使用socket函数
     (2)准备通信地址，使用服务器的地址
     (3)连接socket和通信地址，使用connect函数
     (4)进行通信，使用read/write函数
     (5)关闭socket，使用close函数

1.2 相关函数的解析
(1)listen函数
    #include <sys/types.h>          /* See NOTES */
    #include <sys/socket.h>
    int listen(int sockfd, int backlog);
第一个参数：socket描述符，socket函数的返回值
第二个参数：指定等待连接队列的最大长度
        (允许在该socket上等待被连接的最大个数)
函数功能：
     主要用于将第一个参数指定的socket标记为被动的socket，也就是该socket专门用于使用accept函数去响应即将到来的连接请求，不再作为通信使用

(2)accept函数
     #include <sys/types.h> 
     #include <sys/socket.h>
     int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);
第一个参数：socket描述符，socket函数的返回值
第二个参数：结构体指针，用于存放客户端的通信地址
第三个参数：通信地址的大小
返回值：成功返回用于通信的socket的描述符，失败返回-1
函数功能：
      主要用于响应等待被处理队列中的第一个连接请求

注意：
      socket函数返回的描述符 主要用于监听和响应
      accept函数返回的描述符 主要用于通信的
练习：
     使用tcp协议的编程模型实现一对多的通信
a.要求服务器可以不断地响应客户端的连接请求；
b.要求服务器可以同时和多个客户端进行通信；
c.要求针对每一个客户端可以进行不断地通信；
d.要求当客户端发来"bye"时，表示客户端下线，终止对应
    的子进程；
e.要求使用信号2来关闭服务器；
f. 要求客户端发送的消息由用户手动输入；

2.tcp协议和udp协议的比较
2.1 tcp协议的概念和特性
    tcp - 传输控制协议，是一种面向连接的协议，类似打电话
         建立连接   =>  进行通信   =>  断开连接
         在通信的整个过程中全程需要保持连接
优点和缺点：      
     (1)保证了数据传输的可靠性和有序性，也就是当数据接受
方没有反馈确认信息时，数据发送方会重新发送数据，并且对发送的数据进行编号，接受方可以根据编号进行排序
     (2)属于全双工的字节流通信方式
     (3)数据的接受方可以控制数据发送方的流量大小
     (4)服务器的压力比较大，资源的占用率比较高，发送的速度也会比较慢；
    
2.2 udp协议的概念和特性
    udp - 用户数据报协议，非面向连接的协议，类似发短信
    在通信的整个过程中不需要全程保持连接
优点和缺点：
    (1)服务器端的压力比较小，资源的占用率比较低，发送的速度比较快；
    (2)不能保证数据的可靠性和有序性，数据报也会丢失；
    (3)属于全双工的数据报通信方式
    (4)数据的接受方不能控制数据发送方的流量大小

3.基于udp协议的通信模型(重点)
3.1 通信模型
服务器：
     (1)创建socket，使用socket函数
     (2)准备通信地址，使用结构体类型
     (3)绑定socket和通信地址，使用bind函数
     (4)进行通信，使用sendto/recvfrom函数 
     (5)关闭socket，使用close函数
客户端：
     (1)创建socket，使用socket函数
     (2)准备通信地址，使用服务器的地址
     (3)进行通信，使用sendto/recvfrom函数 
     (4)关闭socket，使用close函数

3.2 相关函数的解析
(1)sendto函数
    #include <sys/types.h>
    #include <sys/socket.h>
     ssize_t send(int sockfd, const void *buf, size_t len, int flags);
     ssize_t sendto(int sockfd, const void *buf, size_t len, int flags,const struct sockaddr *dest_addr, socklen_t addrlen);
第一个参数：socket描述符，socket函数的返回值
第二个参数：被发送数据的首地址
第三个参数：被发送数据的大小
第四个参数：发送的标志，默认给0表示产生阻塞
第五个参数：数据接受方的通信地址
第六个参数：数据接受方通信地址的大小
返回值：成功返回实际发送的数据大小，失败返回-1
函数功能：
      主要用于将指定的消息发送到指定的地址上

(2)recvfrom函数
     #include <sys/types.h>
     #include <sys/socket.h>
     ssize_t recv(int sockfd, void *buf, size_t len, int flags);
     ssize_t recvfrom(int sockfd, void *buf, size_t len, int flags,struct sockaddr *src_addr, socklen_t *addrlen);
第一个参数：socket描述符，socket函数的返回值
第二个参数：存放接受到数据的缓冲区首地址
第三个参数：接受的数据大小
第四个参数：接受的标志，默认给0即可
第五个参数：保存数据发送方的通信地址(来电显示)
第六个参数：通信地址的大小
返回值：成功返回实际接受的数据大小，失败返回-1
函数功能：
      主要用于接受指定的数据并提供来电显示的功能
注意：
     在vi的命令模式下，执行命令：
           :n1,n2 >  表示将n1行到n2行之间的代码向右缩进
           :n1,n2 <  表示将n1行到n2行之间的代码向左缩进
           :n1,n2  co  n3  表示将n1行到n2行之间的代码拷贝
                            到n3行的下面
           :n1,n2  mo  n3  表示将n1行到n2行之间的代码剪切
                            到n3行的下面
     虽然read/write函数也可以实现接受和发送消息，但是在以后的网络编程中要求优先使用send/recv/sendto/recvfrom函数，尽量不去使用read/write函数

作业：
     使用udp协议的通信模型编程实现一个时间服务器，也就是只要服务器收到客户端发来的消息，则将当前服务器的系统时间发送给该客户端

明日预报：
    (1)多线程的编程

















         















