复习：
     ... ...

今天内容：
     (1)内存管理
     (2)文件管理

1.内存管理
1.1 内存管理的相关函数
(1)brk函数
     #include <unistd.h>
     int brk(void *addr);
函数功能：
     主要用于将动态内存的末尾地址调整到参数指定的位置，也就是根据具体的范围来调整动态内存的大小
     参数位置  > 末尾位置
         - 申请动态内存
     参数位置  = 末尾地址
         - 动态内存空间不变
     参数位置 < 末尾位置
         - 释放动态内存

注意：
     使用brk函数释放内存比申请内存方便，因此一般情况下和sbrk函数搭配使用，sbrk函数专门用于申请内存空间，brk函数专门用于释放内存空间

练习：
     使用sbrk函数和brk函数搭配使用，首先申请一个int类型的存储空间，存放数据66，在申请一个double类型的存储空间，存放数据3.14，最后申请10个字节的字符串空间，存放那个数据"hello"，打印以上内存空间中的数据，最后释放所有的内存空间

(2)mmap函数
     #include <sys/mman.h>
     void *mmap(void *addr, size_t length, int prot, int flags,int fd, off_t offset);
第一个参数：建立映射的起始地址，给NULL则由内核指定
第二个参数：映射的长度/大小
第三个参数：映射的权限
     PROT_EXEC - 可执行
     PROT_READ - 可读
     PROT_WRITE - 可写
     PROT_NONE - 不可访问
第四个参数：映射的标志
     MAP_SHARED - 共享的
     MAP_PRIVATE - 私有的
     MAP_ANONYMOUS - 映射到物理内存
第五个参数：文件描述符，暂时给0即可
第六个参数：文件中的偏移量，暂时给0即可
返回值：成功返回映射的首地址，失败返回MAP_FAILED
函数功能：
     主要用于建立文件/设备到内存中的映射

(3)munmap函数
     int munmap(void *addr, size_t length);
第一个参数：映射的起始地址，mmap函数的返回值
第二个参数：映射的长度/大小
函数功能：
      主要用于解除指定的映射关系

1.2 内存管理的层次关系

应用程序 - 业务逻辑
     |
STL标准模版库 - 使用容器和内存分配器，自动管理
     |
标准C++语言 - 使用运算符new申请，使用delete释放
     |
标准C语言  -  使用malloc函数申请,使用free函数释放
     |
POSIX标准  -  使用sbrk函数申请，使用brk函数释放 
     |
linux系统   - 使用mmap函数建立映射，munmap解除映射
                                                                          用户层
--------------------------------------------------------------------------
                                                                          内核层
操作系统内核 - vmalloc函数等
     |
... ...

2.文件管理
2.1 基本概念
     在linux系统中，几乎把所有的一切都统称为文件，包括目录和输入输出设备等等，因此对文件的绝大部分操作都适用于各种输入输出设备等
   
     /dev/null   -  空设备文件
如：
     echo hello
  => 终端中会输出 hello
     echo hello > a.txt
  => 将hello 写入到文件a.txt中
     echo hello > /dev/null
  => 丢弃命令的执行结果
     cat  /dev/null > a.txt
  => 表示清空文件中的内容

2.2 基本操作(重中之重)
复习标C中文件操作函数：
      fopen()/fclose()/fread()/fwrite()/fseek()
学习UC中文件操作函数：
      open()/close()/read()/write()/lseek()

(1)open函数
    #include <sys/types.h>
    #include <sys/stat.h>
    #include <fcntl.h>
    int open(const char *pathname, int flags);
    int open(const char *pathname, int flags, mode_t mode);
    int creat(const char *pathname, mode_t mode);
第一个参数：字符串形式的文件路径和文件名
第二个参数：文件的操作标志
      必须包含以下标志位中的一个
          O_RDONLY  -  只读
          O_WRONLY -  只写
          O_RDWR  -  可读可写
     还可以按位或以下的标志位：
          O_APPEND  -  以追加的方式打开文件
          O_CREAT  -  若文件不存在则创建，若存在则打开
          O_EXCL - 与O_CREAT搭配使用，若文件不存在则
                           创建，若文件存在则创建失败
          O_TRUNC - 若文件存在，则清空文件中的内容
第三个参数：文件的权限信息
      当创建一个新文件时，则需要该参数指定文件的权限信
      息，如：0664，当打开一个已经存在的文件时，不需要
      该参数，此时使用第一个open版本函数
返回值：成功返回文件描述符，失败返回-1
函数功能：
     主要用于打开/创建一个文件/设备

ls -l a.out的执行结果如下：
        -            rwx         rwx           r-x               1 
    文件的类型 属主权限 属组权限  其他用户权限  硬链接数
     tarena   tarena     7431        11月 20 14:43   a.out
    属主名称 属组名称  文件的大小 最后一次修改时间 文件名

其中的文件的类型主要有：
    -  表示普通规则文件
    d  表示目录文件
    ...
其中的权限信息主要有：
    r  表示可读   数字值为 4
    w 表示可写   数字值为 2
    x  表示可执行 数字值为1
    -  表示没有此权限  数字值为0

作业：
    查询文件基本操作的其他函数
明日预报：
    (1)文件的管理









































































