C,D 从当前光标删除到结尾
R从当前光标向结尾替换
pw/pwd 显示当前目录
cc=S
yy=Y
gv 选择上次选择的可视化区域

替换:区域s/xx/yy/   将xx替换为yy,默认替换是忽略大小写的想要对大小写敏感,则在xx前面加上\C
区域:
1)可视化选择的区域
2):1,20
3)% 整个文件



'' 跳回到上次跳转的地方--重点
'. 调到上一次文本被修改的地方--重点
'^ 跳回到插入模式最后一次结束的地方--重点
'[ 跳到上一次被改变(changed)或者复制的文本段的第一个字符


dfk yfk cfk vfk
dt" ct" vt"  dt<  ct< dt{ ct{ 

di" di< di{
ci" ci< ci{
yi" yi< yi{

zc 折叠
zo 展开




ggguG 整个文件都转化为小写
gggUG 整个文件都转化为大写
gUw,gUe 转化单词
gU0,gU$ 当前光标到开头,到末尾




动作:
d删除
y复制
c改变
r替换
o删除空白行

移动:hjkl^$%;,gg G []
e:移动光标所在单词末尾,会被符号中断
E:和e差不多,不会被符号中断
w:移动到光标所在下个单词的开头
W:和w差不多,会被符号中断
f:从当前光标向左移动到指定的字符上面
F:和f的方向相反(向右)
t:和f差不多,t会移动到指定字符的前面一个字符
T:和t相反





s   cl,改变一个字符
S   ^c
cL:表示从当前行删除到末尾
f{char} 如果查找的方向搞错了,可以按","向反想查找,";"重复查找
/patter<CR>   n重复   N 回退
?patter<CR>   n重复   N 回退
:s/target/replacement   &重复   u撤销
执行一系列修改   qx{changes}q   @x重复  u撤销


*高亮当前光标下的单词,然后cw替换一个单词,然后
按n(N)找,有需要替换的单词按下.

删除光标下的单词:daw(delete a world)
将5加或者减<C-a> <C-x>,<C-a>如果光标下不是数字,
则会在当前正向查找一个数字,如果找到了,光标就会跳到那里

d2w:删除两个单词
2dw:做两次删除单词的操作
g~:反转大小写
gu:反转成小写
gU:反转成大写
_:移动到行首非空格处
$:移动到行未非空格处
=$:缩进整个文档
Practical vim, by Drew Neil:这行文字用yt,会复制Practical vim
在插入模式下<C-r>0会将寄存器里的东西粘贴到光标所在的位置


v 面向字符的可视模式
V 面向行的可视模式
<C-v> 面向列块的可视模式
