os模块主要对目录或文件操作

方法        说明
os.name :返回操作系统类型
os.extsep :返回一个"."标识符
os.environ :以字典的形式返回系统变量名
os.devnull :返回/dev/null 
os.linesep :返回换行符"\n"
os.sep     :返回路径分割符'/'
os.listdir(path) :列表形式列出目录下的文件或目录
os.getcwd  :获取当前路径      
os.chdir(path) :切换到path指定的路径,cd
os.mkdir(path,[mode=0777]) :创建目录
os.makedirs(path,[mode=0777]) :递归创建目录mkdir -p
os.rmdir(path) :移除空目录
os.remove(path) :移除文件
os.rename(old,new) :重命名文件或目录
os.stat(path) :获取文件或目录属性
os.chown(path,uid,gid) :改变文件或目录的所有者，所属组
os.chmod(path,mode) :改变文件或目录的权限
os.symlink(src,dst) :创建软链接
os.unlink(path) :移除软链接
urandom(n) :返回所及字节,合适加密使用
os.getuid() :返回当前进程的UID
os.getlogin() :返回登陆用户名
os.getpid() :返回当前进程ID
os.kill(pid,sig):发送一个信号给进程
os.walk(path) 目录生成器,返回格式(dirpath,[dirname],[filename])
os.statvfs(path)
os.system(cmd) :执行shell命令,不能存储cmd返回的结果
popen(command,[mode='r'],[bufsize]) :打开管道来自shell命令,并返回一个管道对象,result=os.open('ls') ; result.read()
os.path



os.path类用于获取文件属性
os.path.basename(path) :通过路径path返回文件名或目录名 os.path.basename('home/lw'):lw
os.path.dirname(path) :通过路径path回返一个文件名前面的部分,于上一行相反
os.path.abspath(path) :返回一个绝对路径 os.path.abspath('01.py') '/home/lw/01.py'
os.path.exists(path) :判断路径path是否存在
os.path.isdir(path) :判断是否为目录
os.path.islink(path) :判断是否为链接
os.path.isfile(path) :判断是否为文件
os.path.ismount(path) :判断是否挂载
os.path.getatime(filename) :返回文件访问时间戳
os.path.getctime(filename) :返回文件变化时间戳
os.path.getmtime(filename) :返回文件修改时间戳
os.path.getsize(filename) :返回文件大小,单位字节
os.path.join(a.*p) :拼接路径 os.path('/home/user','test.py','a.py') =>'/home/user/test.py/a.py'
os.path.split() :分隔路径 os.path.split('/home/user/test.py') =>('/home/user','test.py')
os.path.splitext :分隔扩展名 os.path.splitext('/home/user/test.py','.py') 


glob 模块:支持通配符*?[]
import glob
print glob.glob('./*.py')  #查找以.py结尾的文件
#['./02.py', './01.py']




math模块
方法			描述               例子
math.pi     
math.ceil(x)  返回x浮动的上限   math.ceil(5.8) =>6.0
math.floor(x) 返回x浮动的下限   math.floor(5.2) =>5.0
math.trunc(x) 将数字结尾取整    math.trunc(5.2) =>5
math.fabs(x)  返回x的绝对值     math.fabs(-5.2) =>5.2
math.fmod(x,y) 返回x%y(取余)    math.fmod(5,2)=>1.0
math.mod(x)  返回x的小数和整数  math.mod(5.2)=>(0.200000000000018,5.0)
math.factorial(x) 返回x的阶乘   math.factorial(5) =>120
math.pow(x,y)  返回x的y次方     math.pow(2,3)=>8.0
math.sqrt(x)   开方				math.sqrt(x) math.sqrt(5) =>2.2360679774997898



 
random模块

方法				     描述                例子		
random.randint(a,b)	 返回整数a和b范围的数字,包括a和b  random.randint(1,10)=>6
random.randrange(start,stop,step) 返回整数范围的随机数 random.randrange(1,10,2) =>5
random.random()      返回随机数,在0和1之间     random.random() =>0.7373251914304791
random.sample(array,x) 从列表中返回随机x个元素 random.sample([1,2,3,4,5],2)=>[2,4]




platform模块             描述                      例子
platform.platform()    返回操作系统平台详细信息
platform.system()      返回操作系统平台
platform.uname()       返回操作系统信息
platform.version()     返回操作系统版本
platform.processor()   返回计算机处理器类型      x86_64
platform.node()        返回计算机网络名        www.a.com
platform.python_version()  返回pyton版本号    2.7.13


pickle模块:创建可移植的python序列化对象
持久化存储到文件中
dump(object,file,protocol=None),把对象保存在文件中
load(file)从文件中读取数据,返回对应的对象(即存入时的对象)

import  pickle
dict = {'a':1,'b':2,'c':3}
f = open('a.txt','wb') #二进制模式
pickle.dump(dict,f)
f.close() 
运行后cat a.txt
(dp0
S'a'
p1
I1
sS'c'
p2
I3
sS'b'
p3
I2
s.)



f = open('a.txt')
data = pickle.load(f)
print type(data)
print data

<type 'dict'>
{'a': 1, 'c': 3, 'b': 2}


dumps(object,protocol=None)返回一个pickle格式化的字符串
dump(object,file,protocol=None),把对象保存在文件中

s = "abc"
pk1 = pickle.dumps(s)
print pk1
#"S'abc'\np0\n."
pickle.loads(pk1) 
'abc'



cPickle模块是c语言写,对pickle进行了优化,提升了性能,建议在写代码中使用




subprocess模块会fork一个子进程去执行任务,连接到子进程的标准
输入,输出，错误,并获得它们的返回的返回代码,这个模块将
取代os.system os.spawn* os.popen* popen2.* commands.*

提供了一下常用的方法帮助我们执行bash命令

import subprocess 
retcode = subprocess.call(["ls","-1"])  返回回传码
还可以这样写
retcode = subprocess.call(['ls -l',shell=True])如果回传码非0则引发异常



subprocess.Popen():这个类的参数如下:
参数                     描述
args			命令,字符串或列表	
bufsize 		0代表无缓冲,1代表行缓冲,其他正值代表缓冲区大小,负值采用默认缓冲
executable        
stdin
stdout                  默认没有任何重定向,可以指定重定向到管道,文件对象,文件描述符,
stderr            	,stderr还可以设置为STDOUT

preexec_fn               钩子函数,在fork和exec之间执行
close_fds
shell                    True,宝石当前默认解释器执行,相当于args前面添加/bin/sh -c或winx下cmd.exe/c
cwd 			 指定工作目录
env			 设置环境变量
universal_newlines   	 换行符统一处理成"\n"
startupinfo          	 在windows下的Win32 API发送CreateProcess()创建进程
creationflags  		 在windows下的Win32 发送CREATE——NEW——CONSOLE()创建控制台窗口



subprocess.Popen()类又提供了以下方法:

方法				    描述
Popen.communicate(input=None)      与子进程交互,读取从stdout和stderr缓冲内容,阻塞父进程,等待子进程结束
Popen.kill()			   杀死子进程,在Posix系统上发送SIGKILL信号
Popen.pid()			   获取子进程PID
Popen.poll() 			   如果子进程终止返回状态码
Popen.returncode		   返回子进程状态码
Popen.send_signal(signal)	   发送信号到子进程
Popen.stderr			   如果参数值是PIPE那么这个属性是一个文件对象,提供子进程错误输出,否则为None
Popen.stdin                        如果参数值是PIPE那么这个属性是一个文件对象,提供子进程输入,否则为None
Popen.stdout                        如果参数值是PIPE那么这个属性是一个文件对象,提供子进程输出,否则为None
Popen.terminate() 		    终止子进程，在Posix系统上发送SIGTERM信号，在windows下的Win32 API发送TerminateProcess()到子进程
Popen.wait() 			    等待子进程终止,返回状态码


import subprocess
p = subprocess.Popen('dmesg |grep eth0', stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)

print p.communicate()
print p.pid
p.wait() #等待子进程结束
print p.returncode

subprocess.PIPE提供了一个缓冲区,将stdout,stderr放到这个缓冲区
p.communicate()方法将缓冲区数据读取数来




import subprocess
p1 = subprocess.Popen('ls',stdout=subprocess.PIPE,shell=True)
p2 = subprocess.Popen('grep data',stdin=p1.stdout,stdout=subprocess.PIPE,shell=True)
p1.stdout.close()
output=p2.communicate()[0]
print output

p1的标准输出作为p2的标准输入,这个p2的stdin,stdout也可以是个可读,可写的文件





Queue模块
类				描述

Queue.Empty			当非阻塞get()或get_nowait()对象队列上为空引发异常
Queue.Full			当非阻塞put()或put_nowait()对象队列是一个满的队列引发异常
Queue.LifoQueue(maxsize=0)  	构造函数为后进先出队列。maxsize设置队列最大上限项目数量。小于或等于0代表无限。
Queue.PriorityQueue(maxsize=0)	构造函数为一个优先队列。级别越高越先出。
Queue.Queue(maxsize=0)		构造函数为一个FIFO(先进先出)队列。maxsize设置队列最大上限项目数量。小于或等于0代表无限。
Queue.deque			双端队列。实现快速append()和popleft()，无需锁。
Queue.heapq			堆排序队列。


用到比较多的是Queue.Queue类,
它提供了写操作队列的方法:

方法					描述	
Queue.empty()				如果队列为空返回True，否则返回False
Queue.full()				如果队列是满的返回True，否则返回False
Queue.get(block=True, timeout=None)	从队列中删除并返回一个项目。没有指定项目，因为是FIFO队列，如果队列为空会一直阻塞。timeout超时时间
Queue.get_nowait()  	 		从队列中删除并返回一个项目，不阻塞。会抛出异常。
Queue.join()				等待队列为空，再执行别的操作
Queue.put(item, block=True, timeout=None)	写入项目到队列
Queue.put_nowait()	    		写入项目到队列，不阻塞。与get同理
Queue.qsize()				返回队列大小
Queue.task_done()			表示原队列的任务完成

示例:
from Queue import Queue
q = Queue()
q.put('test') #将'test'放到队列q中
print q.qsize() #1
print q.empty() #False



StringIO模块
将字符串存储在内存中,像操作文件一样操作,主要提供了一个StringIO类
			
	方法		描述
	
StringIO.close()	关闭
StringIO.flush()	刷新缓冲区
StringIO.getvalue()	获取写入的数据
StringIO.isatty()	
StringIO.next()	读取下一行，没有数据抛出异常
StringIO.read(n=-1) 	默认读取所有内容。n指定读取多少字节
StringIO.readline(length=None)	默认读取下一行。length指定读取多少个字符
StringIO.readlines(sizehint=0)	默认读取所有内容，以列表返回。sizehint指定读取多少字节
StringIO.seek(pos, mode=0)	在文件中移动文件指针，从mode（0代表文件起始位置，默认。1代表当前位置。2代表文件末尾）偏移pos个字节
StringIO.tell()	返回当前在文件中的位置
StringIO.truncate()	截断文件大小
StringIO.write(str)	写字符串到文件
StringIO.writelines(iterable)	写入序列，必须是一个可迭代对象，一般是一个字符串列表

import StringIO
f = StringIO.StringIO()
f.write('hello')
print f.getvalue() #hello



logging模块
有几个主要的类:

logging.Logger		应用程序记录日志的接口
logging.Filter		过滤哪条日志不记录
logging.FileHandler	日志写到磁盘文件
logging.Formatter	定义最终日志格式

日志级别:

级别		数字值	描述
critical	50	危险
error		40	错误
warning		30	警告
info		20	普通信息
debug		10	调试
noset		0	不设置


Formatter类可以自定义日志格式,默认时间格式是:%Y-%m-%d %H:%M:%S
有一些这些属性:
%(name)s	日志的名称
%(levelno)s	数字日志级别
%(levelname)s	文本日志级别
%(pathname)s	调用logging的完整路径（如果可用）
%(filename)s	文件名的路径名
%(module)s	模块名
%(lineno)d	调用logging的源行号
%(funcName)s	函数名
%(created)f	创建时间，返回time.time()值
%(asctime)s	字符串表示创建时间
%(msecs)d	毫秒表示创建时间
%(relativeCreated)d	毫秒为单位表示创建时间，相对于logging模块被加载，通常应用程序启动。
%(thread)d	线程ID（如果可用）
%(threadName)s	线程名字（如果可用）
%(process)d	进程ID（如果可用）
%(message)s	输出的消息

import logging
format = logging.Formatter('%(asctime)s - %(levelname)s %(filename)s [line:%(lineno)d] %(message)s')
# 创建日志记录器
info_logger = logging.getLogger('info')
# 设置日志级别,小于INFO的日志忽略
info_logger.setLevel(logging.INFO)
# 日志记录到磁盘文件
info_file = logging.FileHandler("info.log")
# info_file.setLevel(logging.INFO)
# 设置日志格式
info_file.setFormatter(format)
info_logger.addHandler(info_file)
error_logger = logging.getLogger('error')
error_logger.setLevel(logging.ERROR)
error_file = logging.FileHandler("error.log")
error_file.setFormatter(format)
error_logger.addHandler(error_file)
# 输出控制台（stdout）
console = logging.StreamHandler()
console.setLevel(logging.DEBUG)
console.setFormatter(format)
info_logger.addHandler(console)
error_logger.addHandler(console)
if __name__ == "__main__":
    # 写日志
    info_logger.warning("info message.")
    error_logger.error("error message!")



ConfigParser模块
主要用到ConfigParser.ConfigParser()类，对ini格式文件增删该查
ini文件固定结构,有多个部分块组成,每个部分有一个标识
并且有多个key,对各key对应每个值,以"="分隔,值的类型有
三种:字符串，整数，布尔值,其中字符串可以不用双引号,
布尔值用真用1表示注释以:":"开头
		方法									 描述
ConfigParser.add_section(section)	创建一个新的部分配置
ConfigParser.get(section, option, raw=False, vars=None)	获取部分中的选项值，返回字符串
ConfigParser.getboolean(section, option)	获取部分中的选项值，返回布尔值
ConfigParser.getfloat(section, option)	获取部分中的选项值，返回浮点数
ConfigParser.getint(section, option)	获取部分中的选项值，返回整数
ConfigParser.has_option(section, option)	检查部分中是否存在这个选项
ConfigParser.has_section(section)	检查部分是否在配置文件中
ConfigParser.items(section, raw=False, vars=None)	列表元组形式返回部分中的每一个选项
ConfigParser.options(section)	列表形式返回指定部分选项名称
ConfigParser.read(filenames)	读取ini格式的文件
ConfigParser.remove_option( section, option)	移除部分中的选项
ConfigParser.remove_section(section, option)	移除部分
ConfigParser.sections()	列表形式返回所有部分名称
ConfigParser.set(section, option, value)	设置选项值，存在则更新，否则添加
ConfigParser.write(fp)	写一个ini格式的配置文件

例子:cat config.ini
[host1]   
host = 192.168.1.1
port = 22
user = zhangsan
pass = 123
[host2]
host = 192.168.1.2
port = 22
user = lisi
pass = 456
[host3]
host = 192.168.1.3
port = 22
user = wangwu
pass = 789

1)遍历文件中每个部分的每个字段
# -*- coding: utf-8 -*-
from ConfigParser import ConfigParser
conf = ConfigParser()
conf.read("config.ini")
sections = conf.sections()  # 获取部分名称 ['host3', 'host2', 'host1']
for section in sections:
    options = conf.options(section) # 获取部分名称中的键 ['user', 'host', 'port', 'pass']
    for option in options:
         value = conf.get(section, option) # 获取部分中的键值
         print option + ": " + value  
    print "-------------"

也可以用items()获取部分中的每个选项
conf.items('host1')

2)更新或添加选项

from ConfigParser import ConfigParser
conf = ConfigParser()
conf.read("config.ini")
fp = open("config.ini", "w")   # 写模式打开文件，供后面提交写的内容
conf.set("host1", "port", "2222")  # 有这个选项就更新，否则添加
conf.write(fp)  # 写入的操作必须执行这个方法

3)添加一部分,并添加选项
from ConfigParser import ConfigParser
conf = ConfigParser()
conf.read("config.ini")
fp = open("config.ini", "w")
conf.add_section("host4")   # 添加[host4]
conf.set("host4", "host", "192.168.1.4")
conf.set("host4", "port", "22")
conf.set("host4", "user", "zhaoliu")
conf.set("host4", "pass", "123")
conf.write(fp)

4)删除一部分
from ConfigParser import ConfigParser
conf = ConfigParser()
conf.read("config.ini")
fp = open("config.ini", "w")
conf.remove_section('host4')  # 删除[host4]
conf.remove_option('host3', 'pass')  # 删除[host3]的pass选项
conf.write(fp)
