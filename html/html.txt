	   分类：
	     1、封闭类型标记:也叫作 双标记，必须成对出现
	        
		语法
		<标记></标记>
		<p></p>
		<a></a>
		<div></div>
	     2、非封闭类型标记
		也叫作 空标记或单标记
		语法
		<标记>或<标记/>
		ex:
		  <img> - 图像
		  <br> - 换行
		  <hr> - 水平线
      2、元素
         也称之为 标记
	 标记：实际上是语法规范
	 元素：强调的是标记中的内容
	 <div>这是一个div</div>
      3、元素嵌套
	元素之间可以实现嵌套，从而表现出更为复杂的页面结构
	<div><p>这是一个被嵌套的段落</p></div>

	注意：
	  1、嵌套位置和顺序
	     <div><p></div></p>
	  2、被嵌套的内容要通过"代码缩进"来表示层级结构

	     <div><p>这是一个p</p></div>

	     <div>
	     <p>这是一个p</p>
	     </div>

	     <div>
		<p>这是一个p</p>
	     </div>
      4、属性 和 值
         1、作用
	   修饰元素
	 2、语法
	   1、属性的声明必须位于开始标记中
	   2、一个元素可以有多个属性，多个属性之间用空格隔开，并且排名不分先后
	   3、每个属性都可以有值，值和属性之间用 = 连接。值最好要放在引号中('' 或 "")
	   ex : 
		align 属性 ：控制文本的水平对齐方式，
		取值：
		 1、left ：左对齐
		 2、center ：居中对齐
		 3、right：右对齐
	  问题：控制 一个p标记的文本，是水平居中对齐
	  <p align='center'>This is a p</p>
	  在以上的基础上，设置 p元素的id属性值为 p1
	  <p align='center' id="p1">This is a p</p>
	 3、标准属性
	    所有的元素都具备的属性，称之为标准属性或通用属性
	    id:定义元素在网页中独一无二的标识
	    title:鼠标移入到元素上的时候，所弹出的文字
	    class:定义元素所引用的类选择器(CSS中使用)
	    style:定义元素的内联样式(CSS中使用)
      5、注释
	1、什么是注释
	   允许出现在网页源码中，但是不会被浏览器所解释的文本，称之为注释。

	   通常情况下，会将 对代码的解释文本放在注释中，以便让其他的开发者去看。
	2、注释的语法
	   <!-- 注释内容  -->
	   注意：
	     1、注释不能嵌套
	        <!--
		  <!-- -->
		-->
	     2、注释不能出现在<>中
	        <p <!-- align="center" -->></p>
		以上写法是错误的。
      6、HTML 和 XHTML
         1999年12月24日 W3C推出HTML4.01标准规范
	 2000年1月26日 W3C推出XHTML1.0标准规范

	 XHTML1.0 版本 以 HTML4.01几乎相同，但是它是更严格更纯净的HTML版本
	 比如：
	   1、要求标记必须要关闭
	      <p></p>
	      <br/>
	   2、要求属性值必须用引号引起来
	      <p align=center></p>(html4.01和html5中都可以)
      7、HTML5(H5)
         h5的目标，为了实现更加简洁的HTML代码
	 1、空标记有无结束均可
	    <br>
	    <br/>
	 2、属性值可以被引号括起来
	    <p align="center"></p>
	    <p align='center'></p>
	    <p align=center></p>
	 3、有些属性可以不给值
	    <input readonly="readonly">(h5之前的写法)
	    <input readlony>(h5写法)
   3、文档结构
      1、HTML文档结构
         由两大部分组成
	 1、文档类型声明
	    用于指定网页的版本和风格
	 2、html页面
	    要显示在页面给别人去看的内容
      2、文档类型声明
         <!doctype html>
	 该段代码要出现在网页的最顶端
      3、HTML页面
         1、由一对 html 元素表示，位于 文档类型声明之后
	 2、在 <html>元素中，包含两个直接子元素
	   1、<head></head> 
	      网页头部
	      作用：定义页面全局信息
	      包含：
	        <title></title> 定义网页标题
					<script></script> 定义或引入JS文件/代码
					<style></style> 定义内部样式表
					<link/>:引入外部样式表文件
					<meta/>:定义网页元数据
		   比如：
		    1、编码格式
		      设置网页编码格式为utf-8
			<meta charset="utf-8">
		    2、网页关键字
		    3、描述
		 2、<body></body>
				网页主体，所有显示给用户去看的东西都写在body中
				属性：
					1、text
						取值：颜色
						作用：控制整个页面中所有文本的颜色
					2、bgcolor
						作用：设置页面的背景颜色
						取值：颜色
3、文本(重点)
	1、文本标记的作用
		会让文本有不同的显示方式
	2、特殊字符表示方式
		文档中的 空格和回车 最终只会被解释成为一个空格
		如果想表示特殊的字符效果，如 空格，<,>, ... 需要进行转义
		1、&lt;  --> less than
		   表示 <
		2、&gt;  --> greater than
			 表示 >
		3、&nbsp;
			 空格
		4、&copy; 版权符号
			 ©
		5、&yen;
			 ￥
	3、文本标记
		1、文本样式
			1、作用
				对文本进行修饰，比如加粗，斜体，线条样式等...
			2、标记
				1、<b></b>
					加粗
				2、<i></i>
					斜体
				3、<u></u>
					下划线
				4、<s></s>
					删除线
				5、<sup></sup>
					上标 
				6、<sub></sub>
					下标
		2、标题元素
			1、作用
				以醒目(改变字体大小、加粗方式、垂直空白)的方式显示文本 
			2、语法
				<h#></h#>
				#:1~6
				一级标题(<h1></h1>)字最大
				...
				六级标题(<h6></h6>)字最小
			3、属性
				align ：文本的水平对齐方式
				取值：
					1、left
					2、center
					3、right
		3、段落元素
			1、作用
				以特殊的方式来显示文本即段落的上和下都有垂直的空白
			2、语法
				<p></p>
			3、属性
				algin
		4、换行元素
			语法：
				<br>或<br/>
		5、块分区元素
			分区：可以对元素进行分组，多数用于页面布局上
			语法：<div></div>
			作用：独占一行，做布局!!!
		6、行内分区元素
			语法：<span></span>
			作用：包裹文本，灵活的设置文本的样式
		7、分割线元素
			1、作用
				在网页中显示一条水平线
			2、语法
				<hr>或<hr/>
			3、属性
				1、size
					尺寸，相当于设置 水平线的 高度
					取值 以 px 为单位的数值，px可以省略
				2、width
					宽度，以px为单位的数值，px可以省略
				3、color
					颜色
				4、align
					水平线自己的水平对齐方式
		8、预格式化
			1、作用
				保留源文档中的格式，即保留原来的换行和文本中的空格
			2、语法
				<pre>内容</pre>
		9、元素分类
			1、行内元素
				不会换行，可以和其他的行内元素位于同一行
				使用场合：包裹文本，去设置文本的显示效果

				display:inline
				注意：所有的行内元素都不具备 align属性
			2、块级元素
				默认的情况下，每个元素独占一行，适用场合，多数都会用于 布局上

				display:block;
				ex:
					<div></div>
					<p></p>
					<h1>~<h6>
		注意：
			1、不要让行内元素嵌套块级元素
				<span>
					<div></div>
				</span>
				错误的。
			2、p标记
				p标记是不能嵌套块级元素
				<p>
					<p></p>
				</p>
4、图像和链接
	1、URL
		1、目录结构
			目录：文件夹名称，保存网页内容的文件夹
		2、URL
			URL(Uniform Resource Locator)统一资源定位器,俗称 路径,用来表示 网络资源的地址
			资源：图片，音频，视频，文件等...
			路径：从当前位置到目标资源位置所经过的路线。

			三种表现形式:
			1、绝对路径
				1、什么是绝对路径
					从文件最高级路径下开始的完整路径。
					1、访问网络资源
						由 协议名称、主机名(域名/IP地址)、目录路径、文件名
						ex ：获取 百度 LOGO
							协议名称：https
							主机名:www.baidu.com
							目录路径：img
							文件名：bd_logo1.png

							<img src="//www.baidu.com/img/bd_logo1.png" width="270" height="129">
					2、访问本机资源
						文件所在的最高级目录路径：？--文件所在的盘符

						E:\赵旭\CLASS\01_HTML5BASIC\Day01\练习1.jpg
			2、相对路径
				1、什么是相对路径
					从当前文件所在的位置处开始，去查找资源文件所经过的路径就是相对路径

					1、同目录
						直接通过 资源文件名称 进行引用即可
					2、子目录
						先进入，再通过资源名称进行引用
						images/1.jpg
					3、父目录
						先返回，在通过资源文件的名称或路径进行引用
						返回:../
			3、根相对路径
				特点：永远都是从网站所在的服务器根目录处开始查找
				表现方式：/作为开始
	2、图像
		1、图像格式
			1、jpeg
				图像图像联合专家组

				.jpg 作为后缀来存储的
			2、gif
				图形接口格式
				特点：支持动画

				.gif 作为后缀来存储的
			3、png
				可移植网络图形
				采用 无损压缩，有8位，24位，32位三种形式
				支持 透明色(PNG24位不支持)
				.png 作为后缀存储的
		2、图像元素
			1、语法
				<img>
			2、属性
				1、src
					要引用的图像URL(绝对，相对，根相对)
					注意：URL 要严格区分大小写,服务器路径 严格区分大小写。本机路径则无所谓
				2、width
					宽度
				3、height
					高度

					以 px 或 % 为单位的数值，如果省略单位不写，默认为 px
					<img src="../Images/a.jpg" height="300">

					注意：width 和 height 如果只给一个属性的话，那么另外一个属性会跟着等比缩放
					<img width="100px" src="a.jpg">
	3、链接
		1、作用
			链接又叫超链接，允许用户通过点击的操作完成页面的跳转。
		2、语法
			<a>内容</a>
			属性：
				1、href
					链接URL，只有设置了 href 属性之后，才是真正的超链接。
				2、target
					目标，打开新页面的方式
					取值：
						_blank : 在新标签页中打开
						_self:默认值，在当前页中打开
	  3、链接的表现形式
			1、目标文档为下载资源
				href 属性值，指定的文件名称，就是下载操作(rar,zip)
			2、电子邮件链接
				前提：计算机中必须安装 邮件客户端，并且配置好了 邮件信息。
				<a href="mailto:zhaoxu@tedu.cn">联系我们</a>
			3、返回页面顶部的空链接
				<a href="#">内容</a>
			4、链接到Javascript
				<a href="javascript:">内容</a>


	1、链接-锚点
		1、什么是锚点
			用于在页面中做一个记号，允许页面随时随地的跳转到这个记号的位置处
		2、使用方式
			1、定义锚点(做记号)
				1、使用 a 标记的 name 属性
					<a name="NO1">衣装鞋帽</a>
				2、使用任何一个标记的 id 属性
					<ANY id="锚点名称"></ANY>
			2、链接到锚点上(跳到记号位置处)
				<a href="#锚点名称">内容</a>
				ex:
					<a href="#NO1">...</a>
				以上方式，链接到本页的锚点处


				链接到其他页面的锚点处:
				<a href="页面url#锚点名称"></a>
2、表格
	1、什么是表格&表格作用
		由一些 被称之为 单元格的矩形框 按照从左到右从上到下的顺序排列到一起组成的
		表格的作用 以一定的结构来显示信息的。
	2、使用表格
		1、创建表格(语法)
			表格：表格，行，列(单元格)组成
			定义表格：<table></table>
			创建表行：<tr></tr>
			创建列(单元格):<td></td>

			注意：默认情况下，每行中的列数是统一的。

			table : display:table;
			特点：
				1、独占一行
				2、宽度自适应(由内容来决定)

			练习：创建一个三行四列的表格
		2、表格属性
			1、<table> 属性
				1、width
					设置表格宽度
				2、height
					设置表格高度
				3、align
					设置 表格 在其 父元素中的水平对齐方式，取值：left,center,right
				4、border
					边框,边框宽度，以px为单位的数值，px可以省略
				5、cellpadding
					单元格内边距
					单元格边框与内容之间的距离
				6、cellspacing
					单元格外边距
					单元格与单元格之间或者单元格与表格之间的 距离
				7、bgcolor
					背景颜色
			2、<tr> 属性
				1、align
					该行的内容 水平对齐方式
				2、valign
					该行的内容 垂直对齐方式
					取值：top，middle，bottom
				3、bgcolor
			3、<td> 属性
				1、width
				2、height
				3、align
				4、valign
				5、bgcolor
				6、colspan
					设置单元格跨列
				7、rowspan
					设置单元格跨行
		3、表格中的其他标记
			1、<caption></caption>
				作用：为表格定义标题
				位置：表格正上方居中显示
				<table>
					<caption>标题</caption>
					<tr>
						<td></td>
						<td></td>
					</tr>
				</table>
			2、行标题或列标题
				列标题：第一行中的每一列，加粗，水平居中的效果显示
				行标题：每行里面的第一列, 加粗，水平居中的效果显示
				行(列)标题:<th></th>
				<th></th>作用 与 <td></td>一模一样
	3、表格的复杂应用
		1、行分组
			表格可以被划分成3个部分
			1、表头 <thead></thead>
			2、表主体 <tbody></tbody>
			3、表尾	<tfoot></tfoot>

			<table>
				<tbody>
					<tr></tr>
					<tr></tr>
				</tbody>
			</table>

			注意：如果不对表格行进行分组的话，那么默认都属于 tbody 中
		2、不规则表格
			每行中的列数，不是统一化的。
			1、跨列
				合并列，让指定的单元格，横向向右，合并几个单元格(包含自己)
				语法：
					td 的 colspan 属性
			2、跨行
				合并行，让指定的单元格，纵向向下，合并几个单元格(包含自己)
				语法：
					td 的 rowspan 属性

			注意：无论是跨行还是跨列，被合并的单元格一定从代码中删除出去
		3、表格的嵌套
			在一个表格中，又嵌入了另外一个表格
			被嵌套的表格必须出现在<td>中
			<table>
				<tr>
					<td>
						<table>
							<tr>
								<td>
									
								</td>
							</tr>
						</table>
					</td>
				</tr>
			</table>
3、列表
	1、什么是列表&作用
		将具有相似特征或先后顺序的内容按照从上到下的顺序排列起来
	2、列表的组成
		列表是由 列表类型 和 列表项 组成的
		列表类型：
			有序列表
			无序列表
		列表项：
			表示具体的列表中的内容
	3、使用列表
		1、有序列表
			1、语法:
				<ol></ol>  --> Order List

				列表项：<li>内容</li> --> List Item

				练习：创建一个有序列表，存放四个人的姓名
			2、ol 的属性
				1、type
					列表标识的类型
					取值：
						1、1 ：数字(默认值)
						2、a ：小写字母
						3、A ：大写字母
						4、i ：小写罗马字符
						5、I ：大写罗马字符
				2、start
					列表标识的起始编号
					默认为1
		2、无序列表
			1、语法
				<ul></ul>->Unorder List
				列表项：<li></li>
			2、属性
				1、type
					取值：
						1、disc,实心圆(默认值)
						2、circle,空心圆
						3、square,实心矩形
						4、none,不显示标识
	4、列表嵌套
		注意：显示的内容只能放在 li 中
		<ul>
			<li>孙悟空</li>
		</ul>
	5、定义列表
		1、作用
			用于要给出一类事物的定义的情形。
		2、语法
			1、<dl></dl> 定义一个定义列表
			2、<dt></dt> 定义 列表中的一个术语
			3、<dd></dd> 对 术语 进行解释和说明
		3、使用场合
			图文混排
4、结构标记	
	1、什么是结构标记
		H5中新标记，用来表示页面布局的，从而提升标签的语义性
	2、结构标记分类
		1、<header></header>
			作用：用于定义文档的头部
			注意：允许在页面中出现多次，作为任何部分的头部信息定义
			替代:<div id="header"></div>
		2、<nav></nav>
			作用：用于定义页面的导航链接部分
			替代：<div id="nav"></div>
		3、<section></section>
			作用：用于定义文档中的具体组成部分，表示主体内容分
			替代：<div id="main"></div>
		4、<article></article>
			作用：用于定义独立于文档主体内容的一些其他内容
			比如：论坛中的帖子、新闻信息、博客或微博中的条目
		5、<footer></footer>
			作用：用于定义网页中的页脚信息，网页中的靠下部分的内容
		6、<aside></aside>
			作用：用于定义页面中的 边栏信息
		注意：能使用 结构标记的 地方，尽量使用结构标记，无法被结构标记所取代的，就使用 <div id=""> 一起来实现布局
5、表单(重难点)	
	1、表单的作用
		表单用于显示、收集信息，并将信息提交给服务器
	2、完整的表单组成
		1、表单 - form
		2、表单控件 
	3、表单元素(重点)
		1、语法
			<form>
				允许出现表单控件
			</form>
		2、属性
			1、action
				定义表单被提交时发生的动作
				提交给服务器处理程序的地址
				注意：通过 与服务器端人员交流 得到 action 的地址
				默认，提交给本页
			2、method
				作用：定义表单提交数据时的方式
				取值：
					1、get (默认值)
						意义为：得到，获取
						场合：向服务器要数据时使用
						特点：
							1、明文提交,所提交的数据时可以显示在地址栏上的-安全性较低
							2、提交数据有大小限制-最大为2KB
					2、post
						意义：邮寄，邮递
						场合：将数据提交给服务器处理时使用(有保密类型数据时)
						特点：
							1、隐式提交-所提交的内容是不会显示在地址栏上的，安全性较高
							2、无大小限制
					3、put
					4、delete
					5、...
			3、enctype
				作用：编码类型，即表单数据进行编码的方式
				允许表单将什么样的数据提交给服务器
				取值：
				1、application/x-www-form-urlencoded
				默认值
				允许将 普通字符，特殊字符，都提交给服务器，不允许提交 文件
				2、multipart/form-data
				允许 将文件 提交给服务器
				3、text/plain
				只允许提交普通字符。特殊字符，文件等都无法提交
			4、name
				定义 表单的名称



***********************************
1、表单 - 表单控件
	1、分类
		1、input 组元素
		2、textarea 元素
		3、select 和 option 选项框
		4、其他元素
	2、input 元素
		1、语法
			<input> 或 <input/>
		2、属性
			1、type(重点)
				根据不同的type属性值，可以创建各种类型的输入控件，比如：文本框，密码框，复选框，按钮 等... ...
			2、value
				控件的值即要提交给服务器的数据
			3、name
				控件的名称，服务器要用
				命名规范：匈牙利命名法
					控件的缩写+功能名称
			4、disabled
				该属性只要出现在标签中，表示的是 禁用 该控件
		3、input的具体控件
			1、文本框与密码框
				文本框：明文显示用户输入的数据
					<input type="text">
				密码框：密文显示用户输入的数据
					<input type="password">

				属性
					1、name 
						缩写：txt
						ex:
							1、创建一个文本框，表示 接受 用户名称(Username)
							<input type="text" name="txtUsername">
							2、创建一个密码框，表示 接受 用户密码(Userpwd)
							<input type="password" name="txtUserpwd">
					2、value
						1、表示控件的值
						2、表示控件的默认值
					3、maxlength
						限制输入的字符数
					4、readonly
						只读-只能看，不能改
						该属性只要出现在标记中，就是只读的意思，不需要给值

						readonly 与 disabled 的区别
						1、readonly 只能看，不能改，但是可以被提交
						2、disabled 只能看，不能改，但是不能提交给服务器
				注意：对于input来讲，如果不写 type 或者 type值写错的时候，默认都是文本框
			2、单选按钮和复选框
				单选按钮：type="radio"
				复选框：type="checkbox"
				属性：
					1、name
						定义名称
						radio缩写：rdo
						checkbox缩写：chk
						还可以对控件进行分组,一组单选按钮和复选框，名称必须相同

						对于单选按钮：一组中的单选按钮，最多只能有一个被选中
					2、checked
						设置默认被选中
			3、按钮
				1、提交按钮
					功能固定化，负责将表中中的表单控件提交给服务器
					<input type="submit">
				2、重置按钮
					功能固定化，负责将所有表单控件的值恢复为初始值
					<input type="reset">
				3、普通按钮
					无功能，执行客户端的脚本(JS)
					<input type="button">
				属性：
					1、name
						缩写：btn
					2、value
						按钮上的显示文本
			4、隐藏域 和 文件选择框
				1、隐藏域
					不希望被用户看见，但是要提交给服务器的信息 
					<input type="hidden">
					name ：txt+功能名称
					value ：值
				2、文件选择框
					上传文件所用
					<input type="file">
					name : txt+功能名称

					注意：
						1、上传文件时，method的值必须为 post
						2、上传文件时，enctype的值必须为 multipart/form-data
	3、textarea - 多行文本域
		作用：允许用户录入多行数据到表单控件中
		语法：<textarea></textarea>
		属性：
			1、name
				缩写：txt+功能名称
			2、readonly
				只读
			3、cols
				指定文本区域的列数, 变相设置当前元素宽度
			4、rows
				指定文本区域的行数，变相设置当前元素高度
	4、选项框
		1、分类
			1、下拉选项框
			2、滚动列表
		2、语法
			1 、<select></select> 创建选项框
				属性：
					1、name
						缩写：sel+功能名称
					2、size
						取值 大于1的话，则为滚动列表
						否则就是下拉选项框
					3、multiple
						设置多选,该属性出现在 <select>中，那么就允许多选(针对滚动列表)
			2、<option>显示文本</option> 选项
				属性：
					1、value
						选项的值
					2、selected
						预选中
						注意：如果不设置selected属性的话，那么选项框中的第一项会默认被选中。
	5、其他元素
		1、为控件分组
			<fieldset></fieldset> : 为控件分组
			<legend></legend> : 为分组指定一个标题
		2、<label> 元素
			功能：关联 文本 与表达元素的，点击文本时，如同点击表单元素一样

			语法：
				<label>文本</label>
				属性：
					for ：表示与该label相关联的表单控件元素的ID值
2、其他常用标记
	1、浮动框架
		1、作用
			可以在一个浏览器窗口中同时显示多个页面文档
		2、语法
			<iframe>内容</iframe>
			内容：当浏览器不支持<iframe>元素时，将显示该文本作为描述信息
		
			属性：
				1、src
					要引入页面的URL
				2、width
				3、height
				4、frameborder
					浮动框架的边框，如果不想要，可以设置为 0
		3、注意
			该标签，主要针对的是 静态页面的引入

			动态页面中 有专门 引入页面的方式
	2、摘要与细节
		1、作用
			允许用户对某些信息进行展开和收缩
		2、语法
			<details></details> 用于定义细节
			<summary></summary> 用于定义细节中的标题
	3、度量元素
		1、作用
			定义一个度量衡
		2、语法
			<meter>文本</meter>
			属性：
				1、min ：定义度量范围的最小值，默认为0
				2、max ：定义度量范围的最大值，默认为1，一般情况下，将max值设置为 100
				3、value ：度量值，显示在度量元素上的数值，默认为0
	4、时间元素
		1、作用
			用于关联时间的不同表现形式
		2、语法
			<time>文本</time>
			属性：
				datetime ：文本所对应的 日期时间，如果日期和时间同时设置的话，日期和时间之间用“T”分割
	5、高亮文本显示
		1、作用
			以突出背景颜色的方式显示文本
		2、语法
			<mark>文本</mark>
3、CSS - 基础
	1、问题
		1、页面中所有的文本都变成红色
			<body text="red">
		2、将页面中所有的div的文本变为 蓝色
		3、将页面中所有的div的文本变为 黄色

		HTML元素属性的弊端
			1、相同效果要使用不同属性-方式不统一
			2、可重用性和可维护性不高
	2、什么是CSS
		1、CSS(Cascading Style Sheets)
			层叠样式表或级联样式表
			简称：样式表

		2、作用
			以统一的方式定义元素的样式，并且有效的提升可重用性和可维护性

			在HTML文档中，定义元素的样式
			实现了将内容和表现 分离
	3、CSS与HTML之间的关系
		1、HTML主要用于构建网页的结构
		2、CSS主要用于构建网页的样式

		HTML是页面内容组成，CSS是页面的表现
	4、HTML属性与CSS样式使用原则
		W3C建议尽量使用CSS样式取代HTML属性
		ex:
			1、
				html:<font color="red">
				css: color:red
			2、
				html:<body bgcolor="red">
						 <table bgcolor="red">
				css: background-color:red
			3、无法取代
				html:<td colspan="3">
				colspan 是无法被取代，只能使用html属性
	5、使用CSS样式表(重点)
		1、使用CSS样式表方式
			1、内联方式
				将 css 样式定义在元素的style属性中
				语法：<ANY style="若干样式声明"></ANY>
				样式声明：属性名:值;
				<ANY style="属性名:值;属性名:值"></ANY>

				常用的属性及其值：
				1、属性 : color
					作用：控制当前元素的文本颜色
					取值：英文表示法，ex:red,blue,green, ......

					color:red; : 文本颜色为红色
					<div style="color:red;">这是一段div</div>
				2、属性 ：font-size
					作用：控制当前元素的文字大小
					取值：以px 或 pt 为单位的数值
					
					文本红色外，文字大小为48px
					<div style="color:red;font-size:48px;">这是一段div</div>
				3、属性 ：background-color
					作用：控制当前元素的背景颜色
					取值：同color

					文本红色外，文字大小为48px外，背景颜色为绿色
					<div style="color:red;font-size:48px;background-color:green;">这是一段div</div>
			2、内部样式表
				1、语法
					将样式规则 声明在<style>元素中
					<style>元素，声明在 <head>元素中

					样式规则：一条完整的样式声明(一个完整的样式效果)
					在 <style>中，允许出现多条样式规则

					样式规则的组成：
						1、选择器 ：规范了页面中，哪些元素能够使用声明好的样式
						2、若干样式声明 

						选择器{
							属性:值; (样式声明)
							属性:值; (样式声明)
						}

						选择器{属性:值;属性:值;}

						元素选择器:由元素名称，作为选择器
						div{
							color:red;
							font-size:24px;
						}

						以上代码：控制页面上所有的div元素，文本颜色为 red 色，文字大小为 24px

						控制页面上所有的p元素，背景颜色为黄色
						p{
							background-color:yellow;
						}
			3、外部样式表
				1、作用
					将 样式规则 声明在 独立的 .css 文件中，在页面 引入 .css 文件
				2、使用步骤
					1、创建一个样式表文件(*.css为结尾的文本文件)
						该文件中只能包含样式规则(选择器和样式声明)
					2、在需要使用样式表文件的页面上，通过<link/>链接到外部样式表上
						<link rel="stylesheet" href="样式表文件的URL">


每日一练：
	1、使用CSS样式完成页面效果
		1、使用 内联样式 定义 p 元素的样式效果
			文本颜色：红色(red)
			字体大小：18pt
		2、使用内部样式表为 h1 元素定义样式
			文字大小：14px
			文字颜色：蓝色(blue)
		3、使用外部样式表为 h2 元素定义样式
			文字颜色：绿色(green)
			背景颜色：灰色(gray)

1、表单控件
	1、input
		1、语法
			<input> 或 <input/>
			属性：
				1、type
					区分元素
				2、value
					值
				3、name
					名称 ， 匈牙利命名法
				4、disabeld
					禁用，无值
		2、分类
			1、文本框与密码框
				type="text" : 文本框
				type="password" : 密码框

				属性：
					1、maxlength 
					2、readonly
						无值
			2、单选按钮 和 复选框
				type="radio" : 单选按钮
				type="checkbox" : 复选框

				属性：
					1、name
						分组
					2、checked
						设置默认被选中
			3、按钮
				type="submit" : 提交按钮
				type="reset" : 重置按钮
				type="button" : 普通按钮

				属性：
					1、name
					2、value
						按钮上的文本

				按钮：<button>显示文本</button>
					button 如果放在 表单中，就是提交按钮，位于表单外，就是普通按钮
			4、隐藏域 和 文件选择框
				type="hidden"
				type="file"
				注意：
					使用file时
					1、method 必须为 post
					2、enctype 必须为 multipart/form-data
	2、textarea
		语法：<textarea></textarea>
		属性：
			1、name
				名称
			2、cols
				显示的列数
			3、rows
				显示行数
	3、select & option 
		选项框：下拉选项框 ， 滚动列表
		语法
			<select></select>
				属性：
					1、name
						名称
					2、size
						值大于1的话则为 滚动列表 
					3、multiple
						实现多选，无值
			<option></option>
				属性：
					1、value
					2、selected
	4、其他元素
		1、为控件分组
			<fieldset></fieldset> --分组
			<legend></legend> --分组的标题
		2、关联文本和控件
			<label>文本</label>
			属性：
				for ：关联的控件的ID值 
	5、其他常用标记(非表单控件)
		1、浮动框架
			1、作用
				在一个浏览器窗口中，能够显示多个页面文档
			2、语法
				<iframe>文本</iframe>
				
				属性：
					1、src
					2、width
					3、height
					4、frameborder
						取消边框，设置为0
		2、摘要与细节
			<details></details> --定义细节
			<summary></summary> --定义标题
			<details>
				<summary>标题</summary>
			</details>
		3、度量元素
			<meter>文本</meter>
			属性：
				1、min ：最小值，默认0
				2、max ：最大值，默认1
				3、value ：显示的值 
		4、时间元素
			<time>文本</time>
			属性：
				1、datetime
		5、高亮显示
			<mark></mark>
2、CSS基础
	1、什么是CSS
		CSS:Cascading Style Sheets
		层叠样式表 或 级联样式表 或 样式表
	2、CSS特征
		1、以统一的方式声明元素的样式
		2、提高了样式的可重用性 和 可维护性 
	3、CSS 和 HTML 的关系
		1、HTML 负责构建网页
		2、CSS 负责 美化网页

		W3C推荐 尽量使用 css 样式属性 取代 HTML元素的属性
	4、CSS样式表使用方式
		1、内联方式
			别名：内联样式 或 行内样式
			<ANY style="若干样式声明">
			样式声明--> 属性名:值;
			特点：声明好的样式只能在定义的元素中使用
		2、内部样式表
			将样式定义在页面中，页面范围内有效
			<head>
				<style>
					若干样式规则
				</style>
			</head>
			样式规则：选择器，样式声明
			选择器{
				若干样式声明;
			}
			选择器：规范页面中哪些元素能够使用定义好的样式

			div{
				color:red;
				font-size:12px;
			}
		3、外部样式表
			将样式定义在 外部的 样式文件中(*.css)
			步骤：
				1、创建.CSS文件并且定义样式(样式规则)
				2、在使用的页面中进行引入
					<link rel="stylesheet" href="样式表URL">
****************************************
1、CSS语法
	1、CSS样式表特征
		1、继承性
			大部分的样式规则和样式声明是可以被继承的
		2、层叠性
			可以为一个元素定义多个样式
			不冲突时，多个样式表中的样式可以层叠为1个
		3、优先级
			样式定义冲突时，按照不同样式表/规则的优先级来应用样式
			样式优先级：
			浏览器缺省设置         低
			外部/内部样式表        中
				-就近原则
			内联样式							 高

			!important 规则:手动调整优先级
			使用方式：选择器{属性:值 !important;}
			注意： !important 尽量少用
	2、排错
		提示：Unknown property name
					不知道  属性     名称
					属性名写错了!!!!
		提示：Invalid property value
					未验证  属性     值
					属性值写错了!!!!

		所编写的样式 没有出现在 开发工具里的Styls中，选择器写错了!!!!

		只要写完一条样式声明，后面就加 ; 作为结尾

		缺少 } ，该样式规则以后的所有样式规则都没有效果显示
2、CSS基础选择器
	1、作用
		规范了页面中哪些元素能够使用定义好的演示
		目的：匹配页面元素
	2、分类
		1、通用选择器
			语法: *{}
			作用：匹配页面中的所有元素
			ex:
				*{
					font-size:12px;
				}
			注意：尽量少用
		2、元素选择器 值:1
			语法：由元素名称作为选择器
			作用：控制某元素的默认样式
			ex
				/*页面中所有的div 颜色为 红色*/
				div{color:red;}
				/*页面中所有的h1 字体大小为12px*/
				h1{font-size:12px;}
		3、类选择器 值:10
			作用：负责定义 样式，可以由任意一个元素灵活引用。
			语法：.类选择器名称{}
				注意：类选择器名称不能以数字开头
			ex:
				.redColor{
					color:red;
				}
			引用类选择器：由元素的class属性进行引用
				<ANY class="类选择器名称"></ANY>
				注意：引用时，不加 .
			
			多类选择器的引用方式
				允许一个元素同时引用多个 类选择器，那么该元素也同时具备多个选择器定义的效果。
				引用时，多个选择器，用 空格 隔开即可

			分类选择器：
				可以将 类选择器和元素选择器结合起来使用，以实现对某种元素中不同样式的细分控制

				语法：元素选择器.类选择器{}
				ex: 
					p.redColor{} : 定义class 为 redColor 的p元素的样式 

					div.bigFont{} : 定义class为bigFont的div的元素样式
		4、id选择器 值:100
			作用：与元素id联用，定义指定ID值的元素的样式，专属定制

			语法：#id值{ ... }

			#important{
				color:red;
			}

			定义 id为 important 的元素的样式 ， 文本颜色为 红色
			
			div.important{}
			#important{}
		5、群组选择器
			作用：以逗号隔开的选择器列表
					将一些相同的规则用于多个元素中
			语法：选择器1,选择器2,选择器3,...{}
			ex:
				#important,.redColor,span{
					color:red;
					background-color:black;
				}
				id为important和class为redColor以及所有的span元素，样式为 红色的字，黑色的背景
		6、后代选择器
			后代：具备层级关系的元素，被嵌套的都可以称之为 后代

			作用：依据元素在其位置上的上下文关系来定义样式，也称之“包含选择器”，用于选择作为某元素的后代元素
			语法：选择器1 选择器2{}
			ex ： 
				div p{}
				匹配 所有div 中的 p元素
				#d1 p span{}
				匹配 id为d1的元素中 的p元素中的 span元素

		7、子代选择器
			子代：只具备一级的层级关系，被嵌套的元素称之为 子代
			
			要求选择器之间只能存在父子关系
			语法：选择器1>选择器2{}
			ex:
				#d1>p{}
				匹配 id为d1的元素中的下一级子级元素p
				#d1>p>span{}
				匹配 id为d1的元素中下一级p元素中下一级的span元素
			子代选择器的目的不是匹配任意后代元素，而是希望缩小范围，只选择某个元素的子元素
		8、伪类选择器
			1、作用
				为了匹配元素不同的状态的。
			2、语法
				使用 :声明选择器
				:伪类选择器{}

				常用场合：
				选择器:伪类选择器{}
			3、分类
				1、链接伪类
					1、:link : 适用于尚未访问的超链接
					2、:visited : 适用于访问过的超链接
				2、动态伪类
					1、:hover : 适用于悬停在HTML元素时
					2、:active : 适用于HTML元素被激活时
					3、:focus : 适用于HTML元素获取焦点时
				3、目标伪类
				4、元素状态伪类
				5、结构伪类
				6、否定伪类
			4、使用最多的方式
				元素的 样式设置 配合着 :hover 一起使用
3、尺寸与边框	
	1、CSS单位
		1、尺寸单位
			1、%
				相对单位
				宽度：50%
				相对于它的父层元素的宽度的50%
			2、in
				英寸
				1in = 2.54cm
			3、cm
			4、mm
			5、px
				像素，计算机屏幕上的一个小方点
				1024*768 
				1920*1280
			6、pt
				磅
				1pt=1/72in
				多数修饰 文字大小居多
			7、em
				1em 相当于当前字体的尺寸
				2em 相当于当前字体尺寸的2倍
				响应式布局中，使用居多
		2、颜色单位(取值)
			1、rgb(r,g,b)
				r:red (0~255)
				g:green(0~255)
				b:blue(0~255)

				rgb(0,0,0) : 黑色
				rgb(255,255,255) : 白色
				rgb(128,65,12) :
			2、rgb(r%,g%,b%)
			3、rgba(r,g,b,alpha)
				alpha:0~1 之间的数字
			4、#rrggbb
				通过 6位16进制的数字表示颜色
				十六进制：0~9 A~F 
					A:10
					B:11
					C:12
					D:13
					E:14
					F:15
			5、#rgb
				#rrggbb的缩写,每两位一致时，可以用缩写表示
				#000000 --> #000
				#ff55cc --> #f5c
			6、英文单词
	2、尺寸属性
		1 、什么是尺寸
			设置元素的 宽度和高度
			尺寸单位一般为 像素或百分比
		2 、宽度属性
			属性：
				1、width
				2、min-width
				3、max-width
				注意：min-width/max-width 不能与 width 联用，如果同时设置以width 为准

				在css中，所有的数值不能省略单位的
		3 、高度属性
			属性：
				1、height
				2、min-height
				3、max-height

		4、哪些元素能够设置 尺寸属性
			1、块级元素都可以设置
				div,p,h1,h6,ul,ol,li,dl,dt,dd
			2、存在width，height属性的html元素
				img，table，
				input
					type="text"
					type="password"
					type="button/submit/reset"
				... ...

			3、不能修改 尺寸属性
				大部分的行内元素:span,i,s,u,b,sup,sub
				input
					type="radio/checkbox"
		5、溢出处理
			1、什么是溢出
				使用尺寸属性控制元素大小时，如果内容所需的空间大于元素的控件，会导致内容溢出。
			2、溢出处理属性
				属性：
					overflow
					overflow-x : 横向溢出处理
					overflow-y : 纵向溢出处理
				取值：
					1、visible
						可见的(默认值)
					2、hidden
						溢出隐藏
					3、scroll
						元素显示滚动条，内容溢出，滚动条可用
					4、auto
						自动
						溢出时显示滚动条，不溢出则没有滚动 条
	3、边框属性
		1、边框
			1、简写方式
				border:width style color;
					width:宽度
					style:边框线条样式
						取值：
							solid ：实线
							dotted ：虚线
							dashed ：虚线
					color:颜色
						还可以取值为 transparent（透明）
				简写方式：定义四条边框的 宽度，样式，颜色
			2、单边定义
				语法：border-方向:width style color;
					方向：top/right/bottom/left
								上  右    下     左
				ex:
					border-top:2px solid #ddd;
			3、单属性定义
				语法：border-属性:值;
					属性: width/style/color
				ex: border-color:#0f0;
			4、单边单属性定义
				语法：border-方向-属性:值;
					ex:
						border-top-color:#000;
						上边框颜色：#000;

						border-left-style:dotted;
						左边框的样式为 ：虚线
		2、边框倒角
			倒角：直角倒成圆角
			属性：border-radius
			作用：简写属性，从左上角开始，按顺时针顺序设置四个角的倒角半径,最少1个值，最多4个值
			取值：可以是具体数值，也可以是%

			单独定义：
				border-top-left-radius:左上角倒角
				border-bottom-right-radius:右下
				border-top-right-radius:右上
				border-bottom-left-radius:左下
		3、边框阴影
			属性：box-shadow
			取值：由多个属性值组成的列表
				h-shadow v-shadow blur spread color inset;
				h-shadow:必须，阴影水平偏移距离，取值为正，向右偏，取值为负，向左偏
				v-shadow:必须，阴影垂直偏移距离，取值为正，向下偏，取值为负，向上偏
				blur:可选，模糊距离
				spread:可选，阴影尺寸，原有的大小上，增加指定像素大小
				color:可选，颜色
				inset:可选值，将默认的外阴影(outset)改为内阴影
		4、轮廓
			1、什么是轮廓
				绘制于元素周围的一条线，位于边框之外  
			2、属性
				outline:width style color;
				outline-width:轮廓的宽度
				outline-style:轮廓的样式
				outline-color:轮廓的颜色
			3、常用方式
				outline:0; //取消轮廓
				outline:none;//取消轮廓

				border:0; //取消边框
				border:none;//取消边框 

1、框模型(重难点)
	1、框模型
		Box Model(框模型，盒模型，盒子模型)
		定义了元素框处理元素内容(尺寸)，内边距，边框和外边距的方式。

		width 和 height 指内容区域的宽度和高度
		增加了内边距，外边距，边框不会影响内容区域的尺寸，但是会影响元素框的总尺寸

		元素实际宽度=左右外边距+左右边框+左右内边距+width;
		元素实际高度=上下外边距+上下边框+上下内边距+height;

		1、外边距
			1、什么是外边距
				围绕在元素边框周围的空白区域
					外边距会在元素外创建空白
					是透明的
				与下一个元素之间的空间量
			2、语法
				属性：
					margin : 四个方向的外边距
					margin-left : 左外边距
					margin-right : 右外边距
					margin-top : 上外边距
					margin-bottom : 下外边距
				取值：
					单位：
						1、具体数值(px)
						2、百分比%
						3、值为 auto
							由浏览器自动计算 左右外边距，上下无效
							允许让块级元素 ， 呈现出水平居中的表现效果
							要求：块级元素必须设置宽度。
						4、负值
							设置 左外边距和上外边距为负数时，元素会向着相反的方向移动
				简洁写法：
					margin:value;上下左右四个方向外边距
					margin:v1 v2;v1：上下外边距，v2：左右外边距。
						margin:10px 20px;
						上下各10像素外边距，左右各20px外边距
					margin:v1 v2 v3;v1:上外边距 v2:左右外边距 v3:下外边距
						margin:5px 10px 3px;
						上外边距：5px
						左右外边距：10px
						下外边距：3px

						margin:10px auto 2px;
					
					margin:v1 v2 v3 v4;
						v1 : 上
						v2 : 右
						v3 : 下
						v4 : 左
			3、具备默认外边距的元素
				取消默认外边距
				body,p,h1,h2,h3,h4,h5,h6,pre,ol,ul,dl,dd{
					margin:0;
				}
			4、外边距引发的特殊效果
				1、外边距合并
					当两个垂直外边距相遇时，他们将形成一个外边距，成为 "外边距合并"

					合并后的外边距是两个外边距中大者
				2、上下外边距溢出
					子债父还
					在满足一定的条件下，当设置子元素的上下外边距的时候，可能会作用到父元素上
					条件：
						1、父元素 没有边框
						2、子元素必须是父元素中的第一个或最后一个元素时

					解决：
						1、父元素增加上下边框
							弊端：会影响父元素的尺寸
						2、通过 父元素的 内边距，取代子元素的外边距
							弊端：会影响父元素的尺寸
						3、~~~~~~~~~~~~~~
				3、外边距对行内(inline)和行内块(inline-block)的处理
					1、对于行内元素，上下margin无效
					2、对于行内块元素，上下margin会影响到同行的所有元素
		2、内边距
			1、什么是内边距
				内容区域与边框之间的空间
				内边距会扩大元素边框所占据的区域
			2、语法
				属性：
					padding
					padding-left:
					padding-right:
					padding-top:
					padding-bottom:
				取值：
					单位：
						1、px
						2、%
				简单写法:
					padding:value;上下左右
					padding:v1 v2;上下  左右
					padding:v1 v2 v3;上  左右  下
					padding:v1 v2 v3 v4;上右下左
			3、特殊注意
				为元素设定 内边距 ，只能影响自己，不会影响到其他元素
		3、特殊
			对于 button 来说
				<input >
					type="submit/reset/button"
				<button>
			设定宽度和高度时，包含 边框 以及 内边距

			其他元素，设定宽度和高度时，只是设置 内容区域的宽和高，不包含 边框 以及 内边距

			属性：box-sizing
				作用：指定 盒子 尺寸计算 模式
				取值：
					1、content-box
						默认值，为元素所设定的width和height只是内容区域的 width和height，不包含元素的 边框和内边距
					2、border-box
						为元素所指定的width和height会包含元素的 内容宽高以及内边距和边框的距离。
2、背景属性
	1 、背景属性的作用
		控制元素的背景颜色和背景图像等信息
	2、背景属性
		1、背景颜色
			属性：background-color
			取值：
				合法颜色值
				取值为 transparent
			注意：
				背景颜色会从边框的位置处开始绘制
		2、背景图片
			属性：background-image
			取值：url(图片的URL)

			注意：如果 背景图像和背景颜色同时存在的话，那么背景图会压在背景颜色的上面
		3、背景重复
			默认背景是有平铺效果
			属性：background-repeat
			取值：
				1、repeat
					默认值，垂直和水平方向平铺
				2、no-repeat
					不平铺，背景图只显示一次
				3、repeat-x
					仅在水平方向平铺
				4、repeat-y
					仅在垂直方向平铺
		4、背景图片尺寸
			属性：background-size
			取值：
				1、value1 value2
					value1：宽度
					value2：高度
				2、value1% value2%
					取决于元素的宽和高的占比
				3、cover
					覆盖，把背景图扩充至足够的大(等比缩放)，使背景图像完全的覆盖到元素背景区域
					注意：有可能，背景图显示不完整
				4、contain
					包含，把背景图扩充至足够的大(等比缩放)，直到背景图像的右边或下边碰到元素边缘为止
		5、背景图片固定
			属性：background-attachment
			取值：
				1、scroll
					默认值，背景会随着文档滚动
				2、fixed
					固定
		6、背景图像定位/位置(重难点)
			属性：background-position
			取值：
				1、x y
					x:背景图像横向偏移距离
						取值为正，背景图向右移动
						取值为负，背景图向左移动
					y:背景图纵向偏移距离
						取值为正，背景图向下移动
						取值为负，背景图向上移动
				2、x% y%
					取决于父元素宽和高的占比
				3、关键字
					x:left/center/right
					y:top/center/bottom

					background-position:center;
					注意：使用关键字时，x，y的位置可以互换
					background-position:top left;
			
			特殊使用方式：
			CSS Sprites : 图片拼合技术，将若干副小图像拼到一副大图中。以便减少服务器端的请求
			显示图像步骤：
			1、根据要显示的图标大小，创建一个一样大小的元素
			2、将 拼合的图像作为 元素的背景，使用背景图像定位的方式 移动图像以便显示要看的小图

			宽度：76px
			高度：15px
			x：-108px
			y：-238px
		7、背景属性
			将背景若干属性值声明在一个属性中
			语法：
				background:color url() repeat attachment position;

			注意：如果采用 background的简写方式的话，被省略的值将采用默认值来取代
			background:red;

			常用方式：
				background:url() repeat position;
3、渐变
	1、什么是渐变
		两种或多种颜色之间平滑过渡的效果
	2、组成
		1、色标 来组成
			色标：
				1、颜色
				2、颜色的出现的位置
	3、渐变分类
		1、线性渐变
		2、径向渐变
		3、重复渐变(线性/径向)
	4、渐变的语法
		1、属性
			background-image
			取值：
			1、linear-gradient()
				线性渐变
			2、radial-gradient()
				径向渐变
			3、repeating-linear-gradient()
				重复线性渐变
			4、repeating-radial-gradient()
				重复径向渐变
		2、线性渐变
			background-image:linear-gradient(angle,color-point,color-point,...);
			1、angle
				作用：指定 渐变的 方向或角度
				取值：方向的关键词或角度值
					1、to top --> 0deg
						从下向上填充渐变
					2、to right --> 90deg
						从左向右填充渐变
					3、to bottom --> 180deg
						从上向下填充渐变
					4、to left --> 270deg
						从右向左填充渐变
					5、角度
						0deg ~ 360deg
			2、color-point
				作用：色标，标识一种颜色，以及出现的位置
				ex:
					开始的时候是红色 : red 0px/0%
					50%的时候是蓝色 : blue 50%
					结束的时候是绿色 : green 100%



1、渐变
	1、径向渐变
		1、语法
			background-image:radial-gradient([size at position],color-point,color-point,...);
			1、size at position
				size:圆的半径
				position:圆心的位置
					1、数值
						0px 0px ：圆心在元素的左上角
						15px 30px : 
					2、百分比
					3、关键字
				
				注意：该参数可以省略，如果省略的话，那么圆心默认就在元素的中间位置处
	2、重复渐变
		1、语法
			background-image:
				repeating-linear-gradient(angle,color-point,color-point);

				repeaiting-radial-gradient([size at position],color-point,...);
	3、浏览器兼容性
		可以通过增加 浏览器前缀 的方式 实现兼容性
		Firefox : -moz-
		Chrome & Safari :-webkit-
		Opera : -o-

		前缀加在哪???
		如果浏览器不支持 属性的话，那么前缀就加在 属性名称之前
		ex 
		 animation : 动画属性 
		 -moz-animation ：值;

		如果浏览器支持属性但不支持值的话，那么前缀就加在 属性值前
		ex
			background-image:背景图像可以做渐变

			background-image:linear-gradient();
			background-image:-moz-linear-gradient();
			background-image:-webkit-linear-gradient();
			background-image:-o-linear-gradient();
2、文本格式化
	1、概述
		控制字体：字体大小，加粗，样式 ,... ...
		文本格式：文本颜色，排列，缩进 ,... ...

		<b></b> 加粗 --> 加粗
		<i></i> 斜体 --> 样式
	2、字体属性
		1、字体系列
			font-family:value1,value2,... ...;

			ex:
				font-family:"微软雅黑",arial;
		2、字体大小
			font-size
			取值：px，pt，em 作为单位
		3、字体加粗
			font-weight
			取值：
				1、normal
					正常，非加粗显示
					除<b>,<strong>,<h1>~<h6>以外的元素的默认值
				2、bold
					加粗
					<b>,<strong>,<h1>~<h6> 的默认值
				3、400~900
					400 : normal
					900 : bold
		4、字体样式
			font-style
			取值：
				1、normal
					正常，除<i>以外的默认值
				2、italic
					斜体，<i>的默认值
		5、小型大写字母
			font-variant
			取值：
				1、normal
					正常
				2、small-caps
		6、字体属性-font
			font:style variant weight size family;
			注意：在使用简写方式时，一定要带着 family ，否则设定无效

			font:12px; /* 无效*/
			font:12px "微软雅黑";/*有效*/
	3、文本属性
		1、文本颜色
			color
		2、文本排列
			作用：指定文本或行内元素或行内块元素的水平对齐方式
			属性：text-align
			取值：left/center/right
		3、文字修饰
			作用：线条修饰效果
			属性：text-decoration
			取值：
				1、none
					不显示线条
				2、underline
					下划线，<a>,<u>
				3、line-through
					删除线 ,<s>的默认值 
				4、overline
					上划线
		4、行高(重点)
			1、作用
				一行数据的高度
				如果 行高的高度 高于 文字本身的高度的话，那么该段文本将在指定行高的范围内呈现出 垂直居中的显示效果
			2、属性
				line-height
		5、首行文本缩进
			属性：text-indent
			取值：以px为单位的数值(距离)
		6、文本阴影
			属性：text-shadow
			取值：h-shadow v-shadow blur color
3、表格
	1、表格常用样式属性
		1、内边距属性-padding
		2、尺寸属性-width，height
		3、文本格式化属性
			font-*:
			color,text-align,... ...
		4、背景属性
			颜色，图像，渐变
		5、边框属性
		6、vertical-align
			垂直方向对齐
			取值：
				top/middle/bottom
	2、表格特有样式属性
		1、边框合并
			属性：border-collapse
			取值：
				1、separate
					默认值，分离边框模式
				2、collapse
					边框合并模式
		2、边框边距
			1、作用
				设置相邻单元格边框之间的距离(类似于cellspacing)
			2、属性
				border-spacing
				取值：
					1、取1个值
						表示水平和垂直间距相等
					2、取2个值
						第一个值表示的 水平间距
						第二个值表示的 垂直间距
						两个值之间用 空格 隔开
			3、要求
				border-collapse必须为separate
				必须为分离边框模式时有效
		3、标题位置
			<caption></caption>
			作用：将标题位置由默认的位置改到表格之下
			属性：caption-side
			取值：
				1、top
					默认
				2、bottom
					标题位于表格之下
		4、显示规则
			1、作用
				指定浏览器以什么样的方式来布局一个表格。实际是指定了单元格的算法规则

				默认算法：单元格的宽由内容来决定，不受设置的width值来限定。
			2、属性
				table-layout
				取值：
					1、auto
						默认值，自动，列宽由内容来决定
					2、fixed
						固定表格布局，列宽由设定的值决定。
			3、自动表格布局&固定表格布局
				1、自动表格布局(auto)
					单元格的大小会适应内容大小
					在表格复杂时，加载会比较慢
					适用于不确定每列大小时使用
					传统表格表现方式
				2、固定表格布局(fixed)
					单元格的大小由设定的值来决定，与内容无关
					会加速显示表格，浏览器在加载完第一行的时候就不用再计算了。
4、浮动(重难点)
	1、定位
		1、什么是定位
			所谓的定位，实际上就是定义元素框相对于其正常位置应该出现的位置。简单的说，定位就是改变元素在页面上的位置。
		2、定位的分类
			1、普通流定位(默认)
			2、浮动定位
			3、相对定位
			4、绝对定位
			5、固定定位
		3、定位-普通流定位
			普通流定位，也称之为 文档流定位，页面元素默认的定位方式。

			页面块级元素，按照从上到下的方式排列
			页面行内元素，行内块元素，按照从左到右的方向排列。

			问题：多个块级元素在一行内显示???
	2、浮动定位
		1、浮动定位概述
			如果元素的定位方式被设定为 浮动定位，那么将具备以下特征：
			1、元素将被排除在文档流之外-脱离文档流
				不在占据页面空间,后面的非浮动元素，要上前补位。
			2、浮动元素会停靠在父元素的左边或右边，或停靠在平级的其他已浮动元素的边缘上
			3、浮动元素依然位于父元素之内
			4、浮动定位专门处理 块级元素在一行内显示的问题
		2、语法
			属性：float
			取值：
				1、none
					默认值，无浮动
				2、left
					左浮动，让元素停靠在父元素的左边，或者挨着左侧已有的浮动元素
				3、right
					右浮动，让元素停靠在父元素的右边，或者挨着右侧已有的浮动元素
		3、浮动引发的特殊效果
			1、当父元素宽度，显示不下所有的已浮动子元素，那么最后一个将换行
			2、元素一旦浮动起来之后，那么宽度将变成自适应(由内容决定宽度)
			3、元素一旦浮动起来之后，那么将变成块级元素，尤其对行内元素和行内块元素影响较大
				块级元素：能改变 尺寸
				行内元素：不能改变尺寸
			4、文本，行内元素，行内块元素 采用 环绕的方式来排列的，是不会被浮动元素压在底下，而会巧妙的避开浮动元素。
		4、清除浮动
			元素一旦浮动后就会对后续的元素带来一定的影响(位置的影响),如果后续元素想取消位置影响，可以通过 清除浮动的方式来解决
			属性：clear
			取值：
				1、none
					默认值，不做任何清除浮动的操作
				2、left
					清除该元素左边(上边)的浮动元素带来的影响
					该元素的左边不允许出现浮动元素
				3、right
					清除该元素右边的浮动元素带来的影响
					该元素的右边不允许出现浮动元素
				4、both
					清除该元素两边的浮动元素带来的影响
					该元素两边都不允许出现浮动个元素
		5、浮动元素对父元素带来的影响
			解决方案：
			1、直接设置父元素高度
			2、父元素 浮动
			3、为父元素设置 overflow
				overflow:hidden;
				overflow:auto;
			4、父元素中，追加空块级子元素，并且设置其clear属性为both

1、显示
	1、显示方式
		每个元素都有自己的显示方式，来决定元素在页面中到底该如何显示

		块级 ：每个元素独占一行 --> 块框
		行内 ：多个元素一行内显示  --> 行内框

		1、语法
			属性
				display
			取值
				1、none
					没有显示方式，即不显示，隐藏
					脱离文档流

					常用场合：隐藏页面的元素。
				2、block
					让元素显示的和块级一样
					常用场合：将行内元素 改变成 块级元素，以便于去修改元素的尺寸。
				3、inline
					让元素显示的和行内元素一样
					注意：不要将块级元素改变成行内元素。
				4、inline-block
					让元素显示的和行内块元素一样
					行内块：一行内允许显示多个行内块元素，而且允许修改宽和高。
				5、table
					让元素表现的和table一样
					尺寸自适应，独占一行
	2、显示效果
		1、隐藏性
			属性：visibility
			取值：
				1、visible 
					默认值，元素可见
				2、hidden
					元素不可见，但是依然占据空间
				3、collapse
					用在表格元素上，删除一行或一列，不影响表格整个布局
			解释 visibility:hidden 与 display:none 区别
			display:none : 脱离文档流，所以不占据页面空间
			visibility:hidden : 隐藏，但是元素并未脱离文档流，所以东西看不到了，空间还在!
		2、透明度
			属性：opacity
			作用：控制元素的透明度
			取值：0~1之间的数字
				从0.0(完全透明)到1.0(完全不透明)
		3、文本垂直对齐方式
			属性：vertical-align
			作用：
				1、设置单元内容的垂直对齐方式
				2、行内块元素或图片的垂直对齐方式
					指定 行内块元素或图片元素两边的文本 相对于他们的 垂直对齐方式
			取值：
				1、baseline
					默认，基线对齐
					文本基线：最后一行文本的底部
				2、top
				3、middle
				4、bottom

			注意：对于图像来讲，可以设置 vertical-align为 非 baseline 以外的其他值来解决高度多 3px 的问题。
	3、光标
		属性：cursor
		取值：
			1、default
			2、pointer 小手
			3、crosshair +
			4、text I
			5、wait 等待
			6、help 帮助
2、列表
	1、列表项标志
		属性：list-style-type
		取值：
			none ：无标记
			disc ：
			circle ：
			square ：
	2、列表项图像
		属性：list-style-image
		取值：url(图像URL);
	3、列表项位置
		属性：list-style-positioin
		取值：
			1、outside：标志位于文本区域之外，默认值
			2、inside：标志位于文本区域之内
	4、列表属性
		属性：list-style
		取值：type url() position;

		常用方式：list-style:none;
3、定位
	1、定位概述
		1、什么是定位
		2、定位分类
			普通流定位
			浮动定位

			相对定位
			绝对定位
			固定定位
		3、定位属性
			1、position
				作用：指定元素的定位方式
				取值：
					static : 静态，默认方式
					relative : 相对定位
					absolute : 绝对定位
					fixed : 固定定位
				注意：当元素定位方式为 relative/absolute/fixed 的时候，我们称元素为 "已定位元素"
			2、偏移属性
				top,bottom,left,right
				控制 元素位置的移动方向和距离
			3、z-index
				堆叠顺序
	2、定位方式
		1、相对定位
			1、什么是相对定位(特点)
				元素会相对于它原来的位置偏移某个距离
				配合着 偏移属性 改变元素的位置
			2、属性&值
				position:relative;
				top/bottom/left/right : 改变元素位置
			3、使用场合
				1、位置的微调
		2、绝对定位
			1、什么是绝对定位(特点)
				1、脱离文档流-不占据页面空间
				2、绝对定位元素的位置初始化
					绝对定位元素会相对于最近的已定位的祖先元素 实现位置初始化
					已定位：relative/absolute/fixed
					祖先元素：

					如果元素没有已定位的祖先元素，那么它的位置相对于最初的包含块(body,html)实现初始化

					<div id="d1">
						<div id="d2">
							<span></span>
						</div>
					</div>
			2、语法
				position:absolute;
				通过 top/bottom/left/right 实现位置移动和初始化
			3、特殊注意问题
				1、对于margin的处理
					margin可以使用，但是auto无效

					margin的值和位置变化值是共享的。
				2、绝对定位的元素会变成块级元素
					允许修改 尺寸
			4、绝对定位出现场合
					弹出菜单
						1、弹出的东西要压在页面其他正常内容之上 - 脱离文档流
						2、弹出的内容都是关联定位
		3、堆叠顺序
			属性：z-index
			取值：无单位的数值，数值越大，越靠前,可以取负值
			注意：
				1、z-index 只针对已定位元素有效
				2、父子级关系的元素，是没法通过z-index调整堆叠顺序的。永远都是 子压父
		4、固定定位
			作用：将元素内容固定在页面的某个位置处，不会随着滚动条而滚动
			特点：
				1、脱离文档流-不占据页面空间
			属性&值
			position:fixed;
			通过 top/bottom/left/right 移动元素的位置


/css中选择器优先级/

<!doctype html>
<html>
	<head>
		<meta charset="utf-8">
		<title></title>
		<style>
			#span{color:red;}/*100*/
			.s1{color:green;}	/*10*/
			#d1 #span{color:pink;}/*100+100=200*/
			#d1>.p1>.s1{color:orange;}/*100+10+10=120*/
			#d1 p span{color:blue;}/*100+1+1=102*/
			p.p1 .s1{color:purple;}/*1+10+10=21*/
		</style>
	</head>
	<body>
		<div id="d1">
			<p class="p1">
				<span class="s1" id="span" style="color:yellow;">
					我是 d1 中的 p1 中的 span
				</span>
			</p>
		</div>
	</body>
</html>



