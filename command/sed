sed命令
sed是一种流编辑器,它是文本处理中非常中的工具,
在sed处理文件的时候,每一行都被保存在一个叫模式空间的
临时缓冲区中,除非行被删除,或者输出被取消,
否则所有处理的行都将被打印在屏幕上,接着
模式空间被清空,并存入新的一行等待处理

命令格式
sed [options] 'command' file(s)
sed [options] -f scriptfile files(s)

选项
-e<script>或--expression=<script>:以选项中的指定的scritp来处理输入的文本文件
-f<script>或--file=<scirpt文件>:以选项中指定的script文件来处理输入的文本文件
-h或--help:显示帮助
-n或--quiet:仅显示script处理后的结果
-V或--version:显示版本信息

参数
a\ 在当前行下面插入文本。
i\ 在当前行上面插入文本。
c\ 把选定的行改为新的文本。 
d 删除，删除选择的行。
D 删除模板块的第一行。 
s 替换指定字符 
h 拷贝模板块的内容到内存中的缓冲区。 
H 追加模板块的内容到内存中的缓冲区。
g 获得内存缓冲区的内容，并替代当前模板块中的文本。
G 获得内存缓冲区的内容，并追加到当前模板块文本的后面。'
l 列表不能打印字符的清单。 
n 读取下一个输入行，用下一个命令处理新的行而不是用第一个命令。
N 追加下一个输入行到模板块后面并在二者间嵌入一个新行，改变当前行号码。 
p 打印模板块的行。 P(大写) 打印模板块的第一行。 
q 退出Sed。 
b lable 分支到脚本中带有标记的地方，如果分支不存在则分支到脚本的末尾。 
r file 从file中读行。
t label if分支，从最后一行开始，条件一旦满足或者T，t命令，将导致分支到带有标号的命令处，或者到脚本的末尾。
T label 错误分支，从最后一行开始，一旦发生错误或者T，t命令，将导致分支到带有标号的命令处，或者到脚本的末尾。
w file 写并追加模板块到file末尾。 W file 写并追加模板块的第一行到file末尾。 
! 表示后面的命令对所有没有被选定的行发生作用。
= 打印当前行号码。 
#把注释扩展到一个换行符以前



sed替换标记

g表示行内全面替换 p表示打印行
w表示把行写入到一个文件
x表示互换模板块中的文本和缓冲区中的文本
y表示把一个字符翻译为另外的字符(但是不能用于正则表达式)
\1子串的标记
&已匹配字符串标记


sed元字符集
^匹配行的开始
$匹配行的结束
.匹配一个非换行符的任意字符
*匹配0个或多个字符
[]匹配一个指定范围内的字符
[^]匹配一个不在指定范围内的字符
\(..\)匹配子串,如s/\(love\able)\1rs,loveable被替换成lovers
&保存搜索字符用来替换其他字符,如s/love/**&**/,love这成**love**
\<匹配单词的开始,如:/\<love/匹配以love开头的单词的行
\>匹配单词的结束如/love\>匹配包含以love结尾的单词的行
x\{m\}重复字符x,m次
x\{m,\}重复字符x,至少m次
x\{m,n\}重复字符x,至少m次,不多余n次



sed用法实例


1.替换文本中的字符串
sed 's/printf/linwei/' 01.c 
解析:sed会把01.c的行放入到缓冲区中,在缓冲区中进行处理,对每一
行进行处理,处理完了,就继续处理下一行
即把printf那一行的printf替换为linwei,然后默认的方式是
打印缓冲区中的内容
01.c中的内容
#include <stdio.h>
int main(void){
	printf("Hello,world\n");
	printf("hahah");
	return 0;
}
经过替换后
#include <stdio.h>
int main(void){
	linwei("Hello,world\n");
	linwei("hahah");
	return 0;
}
即把修改后缓冲区的内容打印出来


-n选项和p命令一起使用表示只打印缓冲区中发生替换的行
sed -n 's/printf/linwei/p' 01.c
注释:p只会把匹配的,经过修改后的打印出来

全面替换的表示g
sed 's/printf/linwei/g' 01.c 
家了/g则会把一行中所有的printf替换成linwei
不加的话,只会把一行中第一个printf替换成linwei

从每行的第n处开始替换/ng
sed 's/printf/linwei/2g' 01.c  #从每行的第二个匹配到的printf替换成linwei,
第一个匹配到的不做处理

以上命令中/在sed中作为定界符使用,也可以使用任意定
界符

sed 's:test:Text:g'
sed 's#test#Text#g'
sed 's|test#Text|g'

定界符出现在内部时,需要进行转义
sed 's/\/bin/\/usr\/local\/bin/g'

删除操作:d命令
删除空白行
sed '/^$/d' 01.c

删除文件的第二行,注意是第2行,而不是1到2行
sed '2d' 01.c

删除文件的第2行到末尾所有行
sed '2,$d' 01.c

删除文件最后一行
sed '$d' 01.c

删除文件中所有开头是test的行
sed '/^test/'d 01.c
其中/不是定界符,这里/^test/表示的是个整体
如果sed '^testd' 01.c就是错的
sed '#^test#'d 01.c也是错的
sed ':^test:'d 01.c也是错的


以匹配字符串标记&
正则表达式\w\+匹配没一个单词,使用[&]替换它,&对应于之前所
匹配到的单词:
echo this is a test line | sed 's/\w\+/[&]/g'
[this] [is] [a] [test] [line]

echo this is a test line | sed 's#\w\+#[&]#'
[this] is a test line 


所有以192.168.0.1开头的行都会被替换成它自己加localhost
例如192.168.0.1 linwei
sed 's/^192.168.0.1/&localhost' file
192.168.0.1localhost linwei


子串匹配标记\1
注意:这里字串的匹配标记\1只能这样写\(\)
echo linweihha1234 |  sed 's/\(linwei\)/\1printf/g'
结果为:linweiprintfhha1234
匹配给定样式的其中一部分
echo this is digit 7 in a number | sed 's/digit \([0-9\)/\1/'
this is 7 in a number 
命令中 digit 7，被替换成了 7。样式匹配到的子串是 7，\(..\)
用于匹配子串，对于匹配到的第一个子串就标记为 \1,
依此类推匹配到的第二个结果就是 \2，例如：
echo aaa BBB | sed 's/\([a-z]\+\) \([A-Z]\+\)/\2 \1/'
注意:\+ 有转义
echo 'aaa bb ccc' | egrep '([a-z]+)'这里+没有转义

love被标记为1,所有loveable会被替换成lovers,并打印出来
sed -n 's/\(love\)able/\1rs/p'



组合表达式

sed '表达式'| sed '表达式'
等价于:
sed '表达式; 表达式'

引用
sed表达式可以使用单引号用,但是如果表达式内部
包含变量字符串,就需要使用双引号

test=hello
echo hello WORLD | sed "s/$test/HELLO/"

选定行的范围:,(逗号)
所有在模板test和check所确定的范围内的行都被打印
sed -n '/test/,/check/p' file
打印从第5行开始到第一个包含以test开头的行之间的所有行

对于模板test和west之间的行,每行的末尾用字符串aaa bbb替换
sed '/test/,/west/s/$/aaa bbb' file

多点编辑:e命令
01.c内容:
1 
2 
3 
4 
5
6
7

sed -e '1,4d'  -e 's#\([0-9]\)#a#' 01.c
a
a
a
上述第1条命令先删除1到4行,第2条命令
将数字替换成了a
-e等价于--expression
sed --expression='1,4' --expression='s#\([0-9]\)#a#' 01.c

从文件读入:r命令
file里的内容被读取进来,显示在与test匹配的行后面,如果
匹配多行,则file的内容将显示在所有匹配行的下面

file里的内容为
haha
01.c里的内容为
#include <stdio.h>
int main(void){
	printf("helo,world\n");
	printf("helo,world\n");
	printf("helo,world\n");
	printf("helo,world\n");
	return 0;
}
sed '/test/r file' filename
结果为:
#include <stdio.h>
int main(void){
	printf("helo,world\n");
haha
	printf("helo,world\n");
haha
	printf("helo,world\n");
haha
	printf("helo,world\n");
haha
	return 0;
}

写入命令
在example中所有包含test的行都被写入到file里
sed -n '/test/w file' example

追加:a\命令
将this is a test line 追加到以test开头的行的后面
sed '/^test/a\this is a test' file

在test.conf文件第2行之后插入this is a test line
sed -i '2a\this is a test line' test.conf
注释:-i是直接修改文件内容,不输出任何东西,而不是把文件内容放到缓冲区,
在修改缓冲区内容,

插入:i\命令
将this is a test line追加到以test开头的行前面
sed '/^test/i\this is a test line' file

在test.conf文件第5行之前插入this is a test line
sed -i '5i\this is a test line' test.conf

下一个:n命令
如果test被匹配,则移动到匹配行的下一个,替换
这一行的aa,变为bb,并打印该行,然后继续
sed '/test/{n;s/aa/bb;}' file

变形:y命令
把1～10行内所有的abced转变为大写,注意,
正则表达式元字符不能使用这个命令 
sed '1,10y/abcde/ABCDE' file

退出:q命令
打印完10行后,退出sed
sed '10q' file

打印匹配字符串的下一行
grep -A 1 SCC URFILE
sed -n '/SCC/{n;p}' URFILE
awk '/SCC/{getline;print}' URFILE


sed -e '/test/h' -e '$G' file
上述例子中,匹配test的行被找到后,将存入模式空间中
h命令将其复制并存入一个称为保持缓冲区的特殊
缓冲区内,第二条语句的意思是,当达到最后一行后,G命令取出保持缓冲区
的行,然后把它放回模式空间中,且追加到已经存在与模式空间中的行的末尾

特殊的缓冲区只能存储一行数据

file 内容
test 1
test 2
test 3
最终结果为
test 1
test 2
test 3
test 3

保持和互换:h命令和x命令
[linwei@lw ~]$ cat file
test 1
test 2
test 3
check
[linwei@lw ~]$ sed -e '/test/h' -e '/check/x' file
test 1
test 2
test 3
test 3

脚本scriptfile
sed脚本是一个sed的命令清单,启动sed时以-f选项引导脚本
文件名,sed对于脚本中输入的命令非常挑剔,在命令的末尾
不能有任何空白或文本,如果在一行中有多个命令,要用分号分割
以#开头的行为注释行,且不能跨行

sed [options] -f scriptfile file(s)

打印奇数或偶数行
方法1.
sed -n 'p;n' test.txt #奇数行
sed -n 'n;p' test.txt #偶数行

方法2.
sed -n '1~2p' test.txt #奇数行
sed -n '2~2p' test.txt #偶数行

