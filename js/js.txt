一.<script>元素	
1.<script>加载js有两种方式:
1)内嵌在html代码中
<script type="text/javascript">
	function sayHi(){ alert("Hi!);}
</script>
2)外部引用js文件
<script type="text/javascript" src="01.js"> </script> 此时<script></script>
标签之间不应该含有其他js代码,如果有将被忽略

注意点:
1)
<script type="text/javascript">
//alert("</script>"); //error,这里</script>会被当作结束标签
alert("<\/script>"); //这样写就没问题了
</script>
2)<script>元素应该放到head标签里面


二.基本知识
1.标识符:指的是变量、函数 、属性的名字
组成:由字母、数字、下划线、美元符组成,开头不能是数子
2.typeof操作符可能返回下列某个字符串
"undefined","boolean","string","number","object","function"
3.undefined问题
注意点:
1)undefined == undefined ==>true
2)
var message;
alert(typeof message); //声明但没有定义的变量为undefined
alert(typeof age); //没有声明没定义的变量也为undefined

3)null == undefined =>true
4)Boolean有两个值true和false,True和Flase都不是Boolean值,只是标识符
5)哪些可以转为false,和true

数据类型       转换为true的值         转换为false的值
Boolean          true                  false
String          任何非空字符串         ""(空字符串)
Number          任何非零数字值(包括Infity和-Infity)   0和NaN
Object          任何对象除了null         null
Undefined        没有                   undefined

4.NaN规律
1)任何涉及NaN的操作都会返回NaN
2)NaN和任何值都不相等
3)任何数/0 返回NaN,而不像其他语言会报错,所以可以继续执行
4)isNaN(参数),可以判断是否为NaN

5.字符串拼接原理:
var lang = "java";
lang = lang + "Script";
首先创建一个能容纳10个字符的新字符串,然后
在这个字符串中填充"java"和"Script",最后销毁
原来的字符串"java"和字符串"Script"

6.类型转换函数
1)转化为布尔型:Boolean(原始值)
2)转化为Number:Number(原始值)(用的不多),parseInt(原始值),parseFloat(原始值)
3)转化为字符串:原始值.toString(),String(原始值)
两者区别:null和undefined没有toString(原始值)方法
对于String()函数,如果原始值有toString(),则调用该函数
没有toString(),即原始值为null或undefined,则对应返回"null"和"undefined"

7.Object的每个实例都具有的方法和属性:
1)Constructor:返回创建当前实例的构造函数
2)hasOwnProperty(属性名):检查给定的属性在当前对象实例中,是则返回true,否返回false
3)isPrototypeOf(object):检查传入的对象是否是另一个对象的原型
4)propertyIsEnumerable(propertyName):检查给定的属性是否能够使用for-in语句来枚举
5)toLocalString():返回对象字符串表示,该字符串与执行环境的地区对应
6)toString():返回对象的字符串
7)valueOf():返回对象的字符串、数值、布尔值表示

8.操作符
1)一元操作符:
前++,后++(前--,后--) ,+(如+24),-(如-21)
2)位操作符:
~(按位非),&(按位与),|(按位或),^(按位异或),<<(左移),有符号的右移(>>),无符号的右移(>>>)
3)布尔操作符:
!(逻辑非),&&(逻辑与),||(逻辑或)
4)乘性操作符:
*(乘法),/(除法),%(求模)
5)加性操作符:
+(如1+1),-(如2-1)
6)关系操作符:
<,>,<=,>=,
7)相等操作符:
==(相等),!=(不相等),===(全等),!==(不全等)
注意:== ===  是比较使用引用同一个对象,是则相等
1==1 ,1为基本类型的值,它们的地址一样,所以相等
[1] == [1],为引用类型的值,他们的地址不一样,所以不相等

8)条件操作符:
?(如1>3 ? 1: 2)
9)赋值操作符:
var a = 100;
*=,/=,%=,+=,-=,<<=,>>=,>>>=
10)逗号操作符
var n1=1,n2=2,n3=3;
注意点:
var num = (5,1,4,8,0); 由于0是表达式中的最后一项,num则为0

9.语句
1)if语句:
if(){
}else if(){
}else{
}

2)do-while语句
do{
 statement
}while(expression);

3)while语句
while(expression) statement;

4)for语句
for(var i=0;i<100;i++){}
5)for-in语句:一种迭代语句,用来枚举对象的属性
6)label语句:可以在代码中添加标签,以便于将来使用
label:statement
start: for(var i=0;i<count;i++){
alert(i);
}

7)break和continue语句

8)with语句:将代码的作用域设置到一个特定的对象中
with(expression) statement;

var qs = location.search.substring(1);
var hostName = location.hostname;
var url = location.href;
可以用with语句:
with(location){
var qs = search.substring(1);
var hostNam = hostname;
var url = href;
}

9)switch语句:
switch(expression){
case value:statement 
break;
case value:statement 
break;
default:statement
}
10)函数
arguments参数
function f(a,b,c){
	for(var i =0 ;i<arguments.length;i++){
		console.log(arguments[i]);
	}
}
注意点:
js没有重载,如果定义两个函数名相同的函数,不管参数是否一样,后面的函数会覆盖前面的函数


三.作用域和内存问题
1.变量分为两种:基本类型值和引用类型值
基本类型有:Undefined,Null,Boolean,Number和String 5种,其他都为引用类型
两者之间的区别:
1)动态的属性问题:
可以给引用类型的值添加属性和方法,也可以删除属性和方法
但是不能给基本类型的值添加属性和方法,如果给其添加属性和方法
也不会报错,但是实际上添加不上
var x = 100;
x.name = 'linwei';
console.log(x.name); //undefined
2)复制变量值的问题:
a.从一个变量向另一个变量复制基本类型的值时,会在变量对象上创建一个新值,并
把该值复制到为新变量分配的位置上
var x1 = 5;
var x2 = x1;//x1,x2保存的值都为5,但是这两个变量的值5是相互独立的
b.一个变量向另一个变量复制引用类型的值时,这两个变量将引用同一个对象
var obj1 = new Object();
var obj2 = new Object();
obj1.name  = 'linwei';
alert(obj2.name);//'linwei'

3)引用类型和基本数据类型主要区别就是对象的生存期,使用new操作符创建
的引用类型的实例在执行流离开当前作用域之前一直保存在内存中,而自动创建
的基本类型的对象，则只在代码执行瞬间存在,然后立即被销毁,这说明我们不能为基本
类型值添加属性和方法

var s1 = "some text";
s1.color = 'red;
alert(s1.color);
第二行创建的color对象在执行第三行时已经被销毁了,第三行代码
又创建自己的color对象,但是该对象没有值

2.延长作用域链的方法:这两个语句会在作用域链的前端添加一个变量对象
1)try-catch语句的catch块
2)with语句
function buildUrl() {
 var qs = "?debug=true;
 with(location){
 var url = href + qs;
 }
 return url
}
注意:
1)没有块级作用域
2)var声明的变量会自动被添加到最近的环境中

3.数组的方法:
1)push(1)  push(1,2,3) 向数组的末尾添加元素 ,返回元素的总个数
2)pop()删除末尾的元素,并返回删除元素的值

3)unshift(1) unshift(1,2,3) 向数组的开头添加元素,返回元素的总个数
shift() 删除末尾的元素,并返回删除元素的值

4)reverse();反转数组
5)sort()排序
sort(function (s1,s2){return s1-s2;) 由小到大
sort(function (s1,s2){return s2-s1;})有大到小

6)a1.concat(a2) 数组拼接
7)a.slice(起点,结尾点) 不包括结束点,不会影响到原始数组
例如:
a = [1,2,3,4] , a.slice(1,3) 返回[2,3]

8)splice 3个用途,会影响到原始数组
a, a.splice(起点,个数n),删除从起点开始的n个元素,返回删除元素的数组
b, a.splice(起点,个数n,元素1,元素2...) 替换

9)indexOf 和lastIndexOf
var num = [1,2,3,4,5,4,3,2,1]
num.indexOf(4) //3
num.indexOf(4,4) //5
num.lastIndexOf(4) //5
num.lastIndexOf(4,4) //3

10)数组的迭代方法,每个函数有两个参数,一个是函数,影响该函数的作用域对象
a.  every():传入的函数对数组每一项进行处理,每一项处理后都返回true,every函数才返回true
b.  some():和every差不多,只要有一项返回true,则some函数返回true
c.  filter():过滤数组
d.  forEach():不返回任何东西,只是遍历数组
e.  map():将数组中每一项操作后,返回一个新的数组
f.  reduce()
g. reduceRight()

every ,some:
var a = [1,2,3,4,5];
var result = a.every(function (item,index,array){
	return item>=1;
})
console.log(result);

filter:
var result = a.filter(function (item,index,array){
	return item>=2;
}) //[2,3,4,5]

map:
var result = a.map(function (item,index,array){
	return item+=2;

a.forEach(function(item,index,array){
    console.log(item);//[1,2,3,4,5]
})

三.函数
1.每个函数都是Function类型的实例,函数名实际上是一个指向函数对象的指针:
这就导致了函数没有重载
function f1(num){return num+100;}
function f1(num) {return num+200;}

等价于

var f1 = function(num){return num+100;}
f1 = function(num) {return num+200;}

2.函数声明和函数表达式的区别:
1)函数声明会提前,即在执行代码前,会率先读取函数声明,函数表达式生成的函数不会提前
console.log(sum(10,20)); //ok
function sum(num1,num2){return num1+num2;} 

console.log(sum(10,20)); //error
var sum = function(num1,num2){return num1+num2;}

3.函数的属性
a.arguments和this
b.length,prototype
c.apply(对象,数组) 和call(对象,参数1,参数2,...),作用是传递作用域给函数
d.bind(对象) 将函数绑定到对象o上,返回这个函数的实例

apply的使用:
function sum(n1,n2){
	return n1 + n2;
}
function callSum(n1,n2){
	return sum.apply(this,arguments);
}
console.log(callSum(10,20));

call的使用
function sum(n1,n2){
	return n1 + n2;
}	
function callSum(n1,n2){
	return sum.call(this,n1,n2);
}
console.log(callSum(10,20));


bind的使用:

global.color = 'red';
var o = {color:'blue'};

function sayColor(){
	console.log(this.color);
}
var f1 = sayColor.bind(o);
f1(); //blue

4.字符串方法
1)charAt(位置) ,返回单个字符串
var str = 'linwei';
console.log(str.charAt(1)); //'i'
2)concat(字符串1,字符串2,...) // 'hello'.concat('world') => helloworld
3)slice(起点,结束点):和数组一样
4)substring(起点,结束点):和slice差不多,'hello'.substring(1,3)=>'el'
5)substr(起点,lenght) 'hello world'.substr(3,7) => 'lo worl'
6)indexOf和lastIndexOf 和数组的差不多
7)trim():将字符串的前置和后缀的空格删除 '   hello world   '.trim()=>'hello world'
8)toLowerCase()转换为小写字母,toUpperCase()转换为大写字母
9)match
10)split(一串分隔符,数组大小):分割字符串, '1,2,3'.split(',',2)//[1,2,3]
11)localeCompare(字符串):比较字符串

5.Global对象
1)encodeURL和encodeURLComponent
encodeURI:对整个url进行编码,不会对特殊字符(冒号,正斜杠,问号和井号)编码,编码后的结
果是除了空格之外的其他字符都原封不动，只有空格被替换成了%20
encodeURIComponent:对URL的某一段进行编码,对任何非标准字符进行编码
2.decodeURI和decodeURIComponent

2)eval
例子:
eval("function sayHi(){console.log('hahaha');}");
sayHi();

3)其他属性
undefined,NaN,Infinity,Object,Array,Function,Boolean,String,Number
Date,RegExp,Error,EvalError,RangeError,ReferenceError,SyntaxError,TypeError,URIError ，前三个为特殊值,后面的全都是构造函数

4.Math对象
1) max,min方法返回一组数值中的最大值和最小值
Math.max(1,2,3) //3,
如果传递一个数组呢？
Math.max.apply(Math,[1,2,3,4,5]); // 5
2) ceil:向上取整,floor:向下取整,round:执行标准舍入
3) random:返回0~1之间的一个随机数

5.Object对象

1)数据属性:
defineProperty:接受三个参数,第一个参数为实例对象,第二个为属性名,第三个为一个对象{}
,这个对象的属性名只能为,configurable(能否被delete删除),enumerable(能否for-in枚举),writable(能否修改属性),value(属性值)中的一个或多个

例如:
var person = {};
Object.defineProperty(person,"name",{
wriable:false,
value:"linwei"
});
console.log(person.name) //"linwei"
person.name = "xiaoming"; //不能被修改
console.log(person.name) //"linwei"

2)访问器属性
用defineProperty定义，和上面一样,第三个参数是一个{}对象,configurable,enumerable,get,set

例子:
var book = {
_year:2004;
//_常用的标记，表示只能通过对象方法访问的属性(当然能强制访问book._year))
edition:1
};


Object.defineProperty(book,"year",{
enumerable:true,
get:function(){
    return this._year;
},
set: function(newValue){  //特点:通过改变一个属性值,而改变另一个属性值
    if(newValue>2004){
        this._year = newValue;
        this.edition += newValue -2004;
    }
}
});


3)defineProperties()方法和defineProperty差不多,只是前者能定义多个属性
var book = {};
Object.defineProperties(book,{
	_year:{
		writable:true,
		value:2004
	},
	edition:{
		writable:true,
		value:1
	},
	year:{
		get:function(){
			return this._year;
		},
	    set:function(newValue){
			if(newValue>2004){
				this._year = newValue;
			this.edition += newValue - 2004;
			}
		}

	}
});

book.year = 2005;
console.log(book.edition);

4)读取属性的特性:Object.getOwnPropertyDescriptor(对象,属性)

var descriptor = Object.getOwnPropertyDescriptor(book,"_year");
如果是访问器属性,这个descriptor对象的属性:configurable,enumerable,get,set
如果是数据属性,这个descriptor对象的属性:configurable,enumerable,writable,value



四.创建对象
1)构造函数
function Person(name,age,job){
	var o = new Object();
	o.name = name;
	o.age =age;
	o.job = job;
	o.sayName = function(){
		console.log(this.name);
	};
    //o.sayName = new Function("console.log(this.name)"); 上面一行与这行等价
   
	return o;
}

注意点:
a.首字母大写,当然没有强制要求大写,即不大写也没问题
缺点:
b.通过构造函数实例话的对象的方法都是独立的.

2)原型模型:每个函数都有一个prototype(原型)属性,这个属性是一个指针,指向一个对象,
这个对象所包含的方法和属性被所有通过构造函数实例话的对象所共享
特点:
1)实例对象调用属性和方法是先从实例作用域去找,找不到再从原型去找,
如果给实例添加属性(方法)时,如果这个实例属性(方法)和该实例的原型中
的属性(方法)名一样,则该实例属性(方法)将会屏蔽原型中的属性(方法),当用delete
删除属性(方法)时,会删除实例的属性(方法)

例子:
function Person(){
}
Person.prototype.name = "linwei";
var p1 = new Person();
var p2 = new Person();
p1.name = 'Greg';
console.log(p1.name); //"Greg" ---来自实例
console.log(p2.name); //"linwei" ---来自原型

p1.hasOwnProperty("name") //true
p2.hasOwnProperty("name") //false

delete p1.name;
console.log(p1.name);//"linwei" ---来自原型

2)in 操作符:判断属性名是否在对象中,实例属性和原型属性都算在
"name" in p1;//true 

自己手写判断属性(方法)只在原型中的函数:
function hasPrototypeProperty(obj,name){
    return  !obj.hasOwnProperty(name) && (name in obj);
}
3)for-in 枚举实例属性和实例原型的属性
4)上面的例子没添加一个属性和方法就要敲一遍Person.prototype和麻烦,
也为了进行更好的封装原型的功能,于是:
function  Person(){}
Person.prototype  = {
	name:"linwei",
};
var p1 = new Person();
console.log(Person.prototype.constructor); //[Function: Object]
注意点:创建函数时,函数就已经有了prototype属性了,Person.prototype={...}
会覆盖以前的prototype的值,以前Person.prototype.constructor的值是指向Person,现在是指向Object的

所以接下来进行修改:
function Person() {};
Person.prototype = {
	//constructor:Person,
	//constructor这个属性以前是不可枚举的,所以直接这么写不行
    name:"linwei",
};

Object.defineProperty(Person.prototype,"constructor",{
    enumerable:false,
    value:Person
});
其实这种方式也是有问题的
function Person(){}
var p1 = new Person(); //有问题
Person.prototype = {
    constructor:Person,
    name:"linwei"
}

//var p1 = new Person(); 此时就没问题
console.log(p1.name);//undefined 
原因:如果new在前面,prototype赋值在后面,此时Person.prototype和p1.__proto__是同一个
对象,后面的Peroson.prototype赋值操作,会改变Person.prototype的值,但p1.__proto__不会
改变,所以要把new放在后面
P176页

5)混合模式:构造函数+原型模式,构造函数用于定义实例属性,原型模式定义共享的方法和属性
,每个实例都会有自己独立的一份实例属性,同时又共享着对方法的引用
这种方法用的最广泛

function Person(name){
	this.name =  name;
}

Person.prototype = {
    constructor:Person,
    sayName:function(){
        console.log(this.name);
    }
};

var p1 = new Person("linwei");
var p2 = new Person("xiaoming");
console.log(p1.sayName === p2.sayName); // true
缺点:new 要放在Person.prototype 的赋值后面

6)动态原型模式:把所有操作封装在构造函数中
function Person(name){
    this.name = name;
	if(typeof this.sayName != "function"){
		console.log(this.name);
    }
}
var p1 = new Person('linwei');
缺点:不能使用对象字面量重写原型

7)寄生构造函数模式:这个模式和工厂模式其实没撒区别,这个模式
主要用于在特殊情况下用来为对象创建构造函数,假设可以想创建一个
具有额外方法的特殊数组,由于不能直接修改Array构造函数,因此可以用这个模式
function Person(name){
    var o = new Object();
    o.name = name;
    o.sayName = function(){console.log(this.name);};
}
var p1 = new Person("linwei");
p1.sayName();
注意:返回的对象与构造函数Person和Person的原型没有任何关系

8)稳妥构造函数模式:和寄生构造模式差不多,这个模式不用this,new,
主要用来使实例不能直接调用属性,必须用过函数调用属性,保证了
属性的安全性 

function Person(name){
	var o = new Object();
	o.sayName = function(){
		console.log(name);
	}
	return o;
}
var p1 = new Person('linwei');


五.继承
1.原型链:引用类型继承另一个引用类型的属性和方法
缺点:
a.原先的实例属性成了现在的原型属性了
b.创建子类实例的是否不能向超类构造函数传递参数
所以由以上缺点,很少单独使用原型链
function SuperType(){
	this.property = true;	
}

SuperType.prototype.getSuperValue = function(){
	return this.property;
};

function SubType(){
	this.subproperty = false;
}
//继承了SuperType,重新赋值,上面的只是重新赋值给了{}
SubType.prototype = new SuperType();

SubType.prototype.getSubValue = function (){
	return this.subproperty;
}

var instance = new SubType();
console.log(instance.getSuperValue());

调用getSuperValue函数的过程:
a.搜索实例; b搜索SubType.prototype; c.搜索SuperType.prototype
d.搜索Object.prototype

instanceof 操作符:用来测试实例与原型链中出现过的构造函数 
instance instanceof Object;//true
instance instanceof SuperType;//true
instance instanceof SubType;//true 
因此可以说instance是Object,SuperType,SubType中任何一个类型的实例

isPrototypeOf():判断原型链是否派生了某个实例
Object.prototype.isPrototypeOf(instance);//true
SuperType.prototype.isPrototypeOf(instance);//true
SubType.prototype.isPrototypeOf(instance);//true


Object.keys(对象)函数:如果对象是实例,则只返回一个数组包含实例对象的属性
和方法,如果对象是原型则只返回一个数组包含原型的属性和方法,方法和属性都是可枚举的
和object.getOwnPropertyNames(对象)差不多,只是后者对于不可枚举的方法和属性也返回



2.借用构造函数
优点:能够向构造函数传递参数
缺点:超类的构造函数无法复用(即不是共享,独立的),并且
超类的原型中定义的方法,子类并没有继承
function SuperType(name){
    this.name = name;
}
function SubType(name){
    //继承了SuperType的实例属性,同时还传递了参数
    SuperType.call(this,"linwei");
    //实例属性
	this.age = 29;
}
var p1 = new SubType('linwei');


